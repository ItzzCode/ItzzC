	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_optix_HandleGUI
_optix_HandleGUI:
	call	_kb_Scan
	call	_os_GetCSC
	ld	(_optix_guidata+3), a
	call	_kb_AnyKey
	or	a, a
	jq	nz, BB0_2
	ld	a, 1
	ld	(_optix_guidata+2), a
BB0_2:
	ld	a, (_optix_guicolors)
	ld	l, a
	push	hl
	call	_gfx_FillScreen
	pop	hl
	call	_optix_RenderButtons
	call	_optix_HandleCursor
	jp	_optix_CheckForAltKey
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderButtons
_optix_RenderButtons:
	ld	hl, -21
	call	__frameset
	or	a, a
	sbc	hl, hl
	push	hl
	call	_optix_CusText
	ld	de, 0
	pop	hl
	push	de
	pop	iy
	push	de
	pop	bc
BB1_1:
	ld	a, (_optix_buttoninfo)
	ld	e, a
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nc, BB1_8
	ld	(ix - 6), iy
	ld	hl, (_optix_button)
	ld	(ix - 3), hl
	ld	a, (_optix_guicolors+1)
	ld	l, a
	push	hl
	ld	(ix - 9), bc
	call	_gfx_SetColor
	pop	hl
	ld	a, (_optix_buttoninfo+1)
	ld	de, 0
	ld	e, a
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, de
	jq	nz, BB1_7
	ld	de, (ix - 6)
	push	de
	pop	bc
	ld	iy, (ix - 3)
	add	iy, bc
	ld	hl, (iy)
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	(ix - 12), bc
	ld	(ix - 18), iy
	ld	hl, (iy + 21)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_5
	ld	bc, 0
	ld	iy, (ix - 3)
	add	iy, de
	push	bc
	pop	hl
	ld	l, (iy + 2)
	ld	de, (iy + 3)
	ld	c, e
	ld	b, d
	ld	de, 0
	ld	e, (iy + 5)
	push	de
	push	bc
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	jq	BB1_6
BB1_5:
	ld	bc, -2
	ld	hl, (ix - 12)
	add	hl, bc
	ld	(ix - 12), hl
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 15), iy
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, (iy + 2)
	ld	de, -2
	add	hl, de
	ld	(ix - 21), hl
	ld	de, (iy + 3)
	push	bc
	pop	iy
	ld	iyl, e
	ld	iyh, d
	ld	hl, 4
	ex	de, hl
	add	iy, de
	lea	de, iy
	push	bc
	pop	hl
	ld	iy, (ix - 15)
	ld	l, (iy + 5)
	ld	bc, 4
	add	hl, bc
	push	hl
	push	de
	ld	hl, (ix - 21)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix - 18)
	ld	hl, (iy + 21)
	ld	iy, (ix - 15)
	ld	de, (iy)
	ld	bc, 0
	ld	c, e
	ld	b, d
	ld	de, 0
	ld	e, (iy + 2)
	push	de
	push	bc
	push	hl
	call	_gfx_TransparentSprite
BB1_6:
	pop	hl
	pop	hl
	pop	hl
BB1_7:
	ld	de, (ix - 6)
	ld	iy, (ix - 3)
	add	iy, de
	ld	(ix - 3), iy
	lea	hl, iy + 6
	ld	(ix - 12), hl
	ld	hl, (iy)
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	hl, (iy + 3)
	ld	a, 1
	ld	c, a
	call	__sshru
	ld	bc, 0
	push	bc
	pop	iy
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	add	iy, de
	ld	(ix - 15), iy
	ld	hl, (ix - 12)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	push	hl
	pop	de
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, de
	ld	(ix - 15), hl
	ld	de, 0
	push	de
	pop	hl
	ld	iy, (ix - 3)
	ld	l, (iy + 2)
	ld	iy, (ix - 3)
	ld	e, (iy + 5)
	srl	e
	push	de
	pop	bc
	ld	de, -4
	add	hl, de
	add	hl, bc
	push	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_gfx_PrintStringXY
	ld	iy, (ix - 6)
	pop	hl
	pop	hl
	pop	hl
	ld	bc, (ix - 9)
	inc	bc
	ld	de, 28
	add	iy, de
	ld	de, 0
	jq	BB1_1
BB1_8:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_HandleCursor
_optix_HandleCursor:
	call	_optix_HandleTrackPad
	ld	a, (_optix_cursor+3)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	z, BB2_1
	call	_optix_UpdateSelectedButton
	call	_optix_ClickButton
	ret
BB2_1:
	call	_optix_UpdateCursor
	call	_optix_ClickCursor
	call	_optix_RenderCursor
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_CheckForAltKey
_optix_CheckForAltKey:
	ld	hl, -9
	call	__frameset
	ld	bc, 0
	ld	a, (_optix_buttoninfo)
	push	bc
	pop	iy
	push	bc
	pop	de
BB3_1:
	ld	c, a
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nc, BB3_7
	ld	(ix - 6), a
	ld	hl, (_optix_button)
	ld	(ix - 3), iy
	lea	bc, iy
	ld	(ix - 9), hl
	push	hl
	pop	iy
	add	iy, bc
	ld	l, (iy + 27)
	ld	a, (_optix_guidata+3)
	ld	c, a
	ld	a, l
	or	a, a
	jq	nz, BB3_4
	ld	iy, (ix - 3)
	ld	a, (ix - 6)
	jq	BB3_6
BB3_4:
	ld	a, l
	cp	a, c
	ld	iy, (ix - 3)
	ld	a, (ix - 6)
	jq	nz, BB3_6
	ld	(ix - 6), de
	lea	de, iy
	ld	iy, (ix - 9)
	add	iy, de
	ld	hl, (iy + 24)
	call	__indcallhl
	ld	de, (ix - 6)
	ld	iy, (ix - 3)
	ld	a, (_optix_buttoninfo)
BB3_6:
	inc	de
	ld	bc, 28
	add	iy, bc
	ld	bc, 0
	jq	BB3_1
BB3_7:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_HandleTrackPad
_optix_HandleTrackPad:
	ld	hl, -11
	call	__frameset
	ld	hl, -720876
	ld.sis	bc, 255
	ld	iyh, -68
	ld	a, -102
	ld	(ix - 10), a
	ld	a, 120
	ld	(ix - 7), a
	ld	a, 85
	ld	(ix - 6), a
	ld	iyl, 51
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	a, e
	or	a, a
	jq	nz, BB4_2
	ld	e, iyl
	ld.sis	bc, 0
	xor	a, a
	ld	(ix - 3), a
	ld	iy, -720874
	jq	BB4_15
BB4_2:
	ld	d, 0
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	call	__sand
	ld	a, l
	cp	a, 2
	jq	z, BB4_4
	ld	iyh, d
BB4_4:
	ld	a, l
	cp	a, 4
	ld	d, -102
	ld	c, iyl
	jq	z, BB4_6
	ld	d, iyh
BB4_6:
	ld	a, l
	cp	a, 8
	ld	e, 120
	ld	iy, -720874
	jq	z, BB4_8
	ld	e, d
BB4_8:
	ld	a, l
	cp	a, 16
	ld	d, 85
	jq	z, BB4_10
	ld	d, e
BB4_10:
	ld	a, l
	cp	a, 32
	ld	e, c
	jq	z, BB4_12
	ld	e, d
BB4_12:
	ld	a, l
	cp	a, 64
	ld	l, 17
	ld	a, l
	jq	z, BB4_14
	ld	a, e
BB4_14:
	ld	(ix - 3), a
	ld	e, c
	ld.sis	bc, 32
BB4_15:
	ld	d, -34
	lea	hl, iy
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	iyl, e
	ld	iyh, d
	pop	de
	ld	a, iyl
	or	a, a
	ld	(ix - 11), d
	jq	z, BB4_31
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 255
	call	__sand
	ld	a, l
	cp	a, 1
	ld	iyl, d
	jq	z, BB4_18
	push	af
	ld	a, (ix - 3)
	ld	iyl, a
	pop	af
BB4_18:
	ld	a, l
	cp	a, 2
	ld	d, -68
	ld	iyh, e
	jq	z, BB4_20
	ld	d, iyl
BB4_20:
	ld	a, l
	cp	a, 4
	ld	e, -102
	jq	z, BB4_22
	ld	e, d
BB4_22:
	ld	a, l
	cp	a, 8
	ld	d, 120
	jq	z, BB4_24
	ld	d, e
BB4_24:
	ld	a, l
	cp	a, 16
	ld	e, 85
	jq	z, BB4_26
	ld	e, d
BB4_26:
	ld	a, l
	cp	a, 32
	ld	iyl, iyh
	jq	z, BB4_28
	ld	iyl, e
BB4_28:
	ld	a, l
	cp	a, 64
	ld	l, 17
	ld	a, l
	jq	z, BB4_30
	ld	a, iyl
BB4_30:
	ld	(ix - 3), a
	ld.sis	bc, 96
BB4_31:
	ld	iy, -720872
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	a, e
	or	a, a
	jq	z, BB4_47
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 255
	call	__sand
	ld	a, l
	cp	a, 1
	ld	e, -34
	jq	z, BB4_34
	ld	e, (ix - 3)
BB4_34:
	ld	a, l
	cp	a, 2
	ld	d, -68
	ld	iyh, 51
	ld	iyl, iyh
	jq	z, BB4_36
	ld	d, e
BB4_36:
	ld	a, l
	cp	a, 4
	ld	e, -102
	jq	z, BB4_38
	ld	e, d
BB4_38:
	ld	a, l
	cp	a, 8
	ld	d, 120
	jq	z, BB4_40
	ld	d, e
BB4_40:
	ld	a, l
	cp	a, 16
	ld	e, 85
	jq	z, BB4_42
	ld	e, d
BB4_42:
	ld	a, l
	cp	a, 32
	jq	z, BB4_44
	ld	iyl, e
BB4_44:
	ld	a, l
	cp	a, 64
	ld	l, 17
	ld	a, l
	jq	z, BB4_46
	ld	a, iyl
BB4_46:
	ld	(ix - 3), a
	ld.sis	bc, 160
BB4_47:
	ld	iy, -720870
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	a, e
	or	a, a
	jq	z, BB4_63
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 255
	call	__sand
	ld	a, l
	cp	a, 1
	ld	e, -34
	jq	z, BB4_50
	ld	e, (ix - 3)
BB4_50:
	ld	a, l
	cp	a, 2
	ld	d, -68
	ld	iyl, 51
	jq	z, BB4_52
	ld	d, e
BB4_52:
	ld	a, l
	cp	a, 4
	ld	e, -102
	jq	z, BB4_54
	ld	e, d
BB4_54:
	ld	a, l
	cp	a, 8
	ld	d, 120
	jq	z, BB4_56
	ld	d, e
BB4_56:
	ld	a, l
	cp	a, 16
	ld	e, 85
	jq	z, BB4_58
	ld	e, d
BB4_58:
	ld	a, l
	cp	a, 32
	jq	z, BB4_60
	ld	iyl, e
BB4_60:
	ld	a, l
	cp	a, 64
	ld	l, 17
	ld	a, l
	jq	z, BB4_62
	ld	a, iyl
BB4_62:
	ld	(ix - 3), a
	ld.sis	bc, 224
BB4_63:
	ld	iy, -720868
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	a, e
	or	a, a
	jq	nz, BB4_65
	ld	e, (ix - 3)
	jq	BB4_80
BB4_65:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld.sis	bc, 255
	call	__sand
	ld	a, l
	cp	a, 1
	jq	z, BB4_67
	ld	a, (ix - 3)
	ld	(ix - 11), a
BB4_67:
	ld	a, l
	cp	a, 2
	ld	e, 17
	ld	c, -68
	ld	b, 51
	jq	z, BB4_69
	ld	c, (ix - 11)
BB4_69:
	ld	a, l
	cp	a, 4
	jq	z, BB4_71
	ld	(ix - 10), c
BB4_71:
	ld	a, l
	cp	a, 8
	jq	z, BB4_73
	ld	a, (ix - 10)
	ld	(ix - 7), a
BB4_73:
	ld	a, l
	cp	a, 16
	jq	z, BB4_75
	ld	a, (ix - 7)
	ld	(ix - 6), a
BB4_75:
	ld	a, l
	cp	a, 32
	jq	z, BB4_77
	ld	b, (ix - 6)
BB4_77:
	ld	a, l
	cp	a, 64
	jq	z, BB4_79
	ld	e, b
BB4_79:
	ld.sis	bc, 288
BB4_80:
	ld	d, 0
	ld	a, (_optix_guidata+11)
	ld	iyl, e
	ld	iyh, d
	ld	e, a
	ld	l, c
	ld	h, b
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB4_86
	ld	a, iyl
	or	a, a
	jq	nz, BB4_82
BB4_86:
	inc	e
	ld	a, e
	jq	BB4_87
BB4_82:
	ld	(ix - 3), iy
	ld	iy, 0
	ld	iyl, c
	ld	iyh, b
	ld	a, e
	cp	a, 3
	jq	c, BB4_83
	ld	de, _optix_cursor
	ex	de, hl
	ld	de, (hl)
	ld	(ix - 6), de
	ld	hl, _optix_guidata+8
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	a, (_optix_cursor+2)
	ld	(ix - 7), a
	ld	(_optix_guidata+10), a
	ld	hl, _optix_guidata+5
	ld	(hl), c
	inc	hl
	ld	(hl), b
	ld	de, (ix - 3)
	ld	a, e
	ld	(_optix_guidata+7), a
	ld	(ix - 10), de
	lea	bc, iy
	jq	BB4_85
BB4_83:
	ld	hl, _optix_guidata+8
	ld	de, (hl)
	ld	(ix - 6), de
	lea	bc, iy
	ld	iy, _optix_guidata+5
	ld	de, (iy)
	push	bc
	pop	iy
	ld	a, (_optix_guidata+10)
	ld	(ix - 7), a
	ld	a, (_optix_guidata+7)
	ld	c, a
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	h, d
	ld	b, 0
	ld	(ix - 10), bc
	ld	de, (ix - 3)
	push	hl
	pop	bc
BB4_85:
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	bc, 3
	call	__idivs
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	add.sis	hl, bc
	ld	iy, _optix_cursor
	ld	(iy), l
	ld	(iy + 1), h
	ld	l, e
	ld	h, d
	ld	de, (ix - 10)
	or	a, a
	sbc.sis	hl, de
	ld.sis	bc, 3
	call	__sdivs
	ld	a, (ix - 7)
	add	a, l
	ld	(_optix_cursor+2), a
	xor	a, a
BB4_87:
	ld	(_optix_guidata+11), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateCursor
_optix_UpdateCursor:
	call	_kb_Scan
	ld	hl, -720866
	push	hl
	pop	bc
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	ld	hl, _optix_cursor
	ld	iy, (hl)
	bit	1, a
	jq	z, BB5_3
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	add.sis	hl, bc
	or	a, a
	sbc.sis	hl, bc
	jq	z, BB5_3
	ld.sis	de, -2
	add.sis	iy, de
	ld	hl, _optix_cursor
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
BB5_3:
	push	bc
	pop	hl
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	2, a
	jq	z, BB5_6
	ld.sis	de, 320
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB5_6
	ld.sis	de, 2
	add.sis	iy, de
	ld	hl, _optix_cursor
	push	de
	ld	e, iyl
	ld	d, iyh
	ld	(hl), e
	inc	hl
	ld	(hl), d
	pop	de
BB5_6:
	push	bc
	pop	hl
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, (_optix_cursor+2)
	ld	e, a
	bit	3, l
	jq	z, BB5_9
	ld	a, e
	or	a, a
	jq	z, BB5_9
	ld	a, e
	add	a, -2
	ld	e, a
	ld	(_optix_cursor+2), a
BB5_9:
	push	bc
	pop	hl
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, c
	bit	0, a
	jq	nz, BB5_12
	ld	a, e
	cp	a, -16
	jq	nc, BB5_12
	ld	a, e
	add	a, 2
	ld	e, a
	ld	(_optix_cursor+2), a
BB5_12:
	ld.sis	bc, 321
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB5_14
	ld.sis	hl, 320
	ld	iy, _optix_cursor
	ld	(iy), l
	ld	(iy + 1), h
BB5_14:
	ld	a, e
	cp	a, -15
	jq	c, BB5_16
	ld	a, -16
	ld	(_optix_cursor+2), a
BB5_16:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_ClickCursor
_optix_ClickCursor:
	ld	hl, -18
	call	__frameset
	ld	hl, -720868
	ld.sis	bc, 1
	ld	de, _optix_cursor
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	call	__sand
	ld	(ix - 3), hl
	ld	a, (_optix_guidata+2)
	ld	iyh, a
	ld	a, (_optix_buttoninfo)
	ld	iyl, a
	ld	hl, (_optix_button)
	ld	(ix - 6), hl
	ex	de, hl
	ld	hl, (hl)
	ld	bc, 0
	push	bc
	pop	de
	ld	e, l
	ld	d, h
	ld	(ix - 9), de
	ld	a, (_optix_cursor+2)
	ld	c, a
	ld	(ix - 12), bc
	ld	e, 1
	ld	hl, (ix - 3)
	ld	a, l
	xor	a, e
	bit	0, a
	jq	nz, BB6_10
	ld	a, iyh
	or	a, a
	jq	nz, BB6_2
BB6_10:
	or	a, a
	sbc	hl, hl
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	inc	iyl
	ld	a, iyl
	ld	iy, (ix - 6)
	lea	iy, iy + 2
	ld	b, 0
BB6_11:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_18
	ld	(ix - 15), a
	ld	(ix - 3), b
	ld	(ix - 6), hl
	ld	hl, (iy - 2)
	ld	bc, 0
	push	bc
	pop	de
	ld	e, l
	ld	d, h
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, de
	ld	bc, (iy + 1)
	ld	de, 0
	ld	e, c
	ld	d, b
	ld	(ix - 18), hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB6_16
	ld	de, 0
	ld	e, (iy)
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	bc
	ld	a, (iy + 3)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB6_16
	ld	de, 0
	ld	e, a
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB6_16
	ld	hl, (ix - 18)
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB6_17
BB6_16:
	ld	a, (ix - 15)
	ld	(_optix_buttoninfo+1), a
	ld	b, (ix - 3)
	inc	b
	ld	hl, (ix - 6)
	dec	hl
	lea	iy, iy + 28
	jq	BB6_11
BB6_2:
	ld	bc, 0
	push	bc
	pop	hl
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	xor	a, a
	ld	iy, (ix - 6)
BB6_3:
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_9
	ld	(ix - 6), hl
	ld	hl, (iy)
	push	bc
	pop	de
	ld	e, l
	ld	d, h
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	ld	hl, (iy + 3)
	push	bc
	pop	de
	ld	bc, (ix - 3)
	ld	e, l
	ld	d, h
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB6_19
	ld	de, 0
	ld	e, (iy + 2)
	ld	hl, (ix - 12)
	or	a, a
	sbc	hl, de
	ld	a, (iy + 5)
	ld	(ix - 15), hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB6_19
	ld	de, 0
	ld	e, a
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB6_19
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB6_8
BB6_19:
	lea	iy, iy + 28
	ld	hl, (ix - 6)
	dec	hl
	xor	a, a
	ld	bc, 0
	jq	BB6_3
BB6_17:
	ld	a, (ix - 3)
	ld	(_optix_buttoninfo+1), a
	jq	BB6_18
BB6_8:
	ld	hl, (iy + 24)
	call	__indcallhl
	xor	a, a
BB6_9:
	ld	(_optix_guidata+2), a
BB6_18:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderCursor
_optix_RenderCursor:
	ld	hl, -3
	call	__frameset
	ld	a, (_optix_guicolors+1)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, _optix_cursor
	ld	hl, (hl)
	ld	bc, 0
	push	bc
	pop	de
	ld	e, l
	ld	d, h
	ld	a, (_optix_cursor+2)
	ld	c, a
	ld	(ix - 3), bc
	ld	hl, 5
	push	hl
	push	bc
	push	de
	call	_gfx_Circle
	pop	hl
	pop	hl
	pop	hl
	ld	hl, _optix_cursor
	ld	hl, (hl)
	ld	bc, (ix - 3)
	ld	c, l
	ld	b, h
	ld	a, (_optix_cursor+2)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	de, 4
	push	de
	push	hl
	push	bc
	call	_gfx_Circle
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateSelectedButton
_optix_UpdateSelectedButton:
	ld	hl, -26
	call	__frameset
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), hl
	ld	a, (_optix_guidata+2)
	inc	l
	xor	a, l
	bit	0, a
	jq	nz, BB8_39
	call	_kb_Scan
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	c, 14
	call	__sshl
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	add.sis	iy, iy
	sbc.sis	hl, hl
	ld	c, l
	ld	b, h
	ld	a, b
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	d, a
	ld	e, c
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	c, 2
	call	__sshru
	ld.sis	bc, 1
	call	__sand
	ld	iy, 0
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	add	iy, de
	ld	(ix - 9), iy
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	c, 12
	call	__sshl
	ex	de, hl
	ld	iyl, e
	ld	iyh, d
	ex	de, hl
	add.sis	iy, iy
	sbc.sis	hl, hl
	ld	e, l
	ld	d, h
	ld	a, d
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyh, a
	ld	iyl, e
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	de, 0
	ld	e, l
	ld	d, h
	add	iy, de
	ld	(ix - 16), iy
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_3
	ld	a, 0
	jq	BB8_4
BB8_3:
	ld	a, 1
BB8_4:
	ld	hl, (ix - 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_6
	xor	a, a
BB8_6:
	bit	0, a
	jq	nz, BB8_39
	ld	iy, (_optix_button)
	ld	(ix - 6), iy
	ld	a, (_optix_buttoninfo+1)
	ld	de, 0
	ld	e, a
	ld	a, (_optix_buttoninfo)
	ld	(ix - 10), a
	ld	bc, 28
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 20), iy
	ld	a, (_optix_guisettings+2)
	ld	e, a
	ld	(ix - 23), de
	ld	bc, 0
	ld	c, (ix - 10)
	xor	a, a
	ld	(ix - 10), a
	ld	de, 10000
BB8_8:
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_36
	ld	(ix - 13), de
	ld	(ix - 17), a
	ld	iy, (ix - 6)
	ld	a, (iy + 27)
	or	a, a
	jq	nz, BB8_13
	ld	iy, (ix - 9)
	lea	hl, iy
	ld	de, -1
	or	a, a
	sbc	hl, de
	ld	(ix - 26), bc
	jq	nz, BB8_14
	ld	hl, (ix - 6)
	ld	iy, (hl)
	ld	hl, (ix - 20)
	ld	de, (hl)
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB8_22
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), hl
	ld	bc, (ix - 3)
	ld	c, iyl
	ld	b, iyh
	ld	(ix - 3), bc
	push	hl
	pop	bc
	ld	l, e
	ld	h, d
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	push	bc
	pop	hl
	push	bc
	pop	de
	ld	iy, (ix - 6)
	ld	l, (iy + 2)
	ld	iy, (ix - 20)
	jq	BB8_17
BB8_13:
	ld	a, (ix - 17)
	ld	h, (ix - 10)
	jq	BB8_31
BB8_14:
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	jq	nz, BB8_19
	ld	hl, (ix - 6)
	ld	de, (hl)
	ld	iy, (ix - 20)
	ld	bc, (iy)
	ld	l, c
	ld	h, b
	or	a, a
	sbc.sis	hl, de
	jq	nc, BB8_22
	or	a, a
	sbc	hl, hl
	ld	(ix - 3), de
	push	hl
	pop	de
	ld	e, c
	ld	d, b
	ld	bc, (ix - 3)
	ld	l, c
	ld	h, b
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	ld	de, 0
	push	de
	pop	hl
	lea	bc, iy
	ld	iy, (ix - 6)
	ld	l, (iy + 2)
	push	bc
	pop	iy
BB8_17:
	ld	e, (iy + 2)
	or	a, a
	sbc	hl, de
BB8_18:
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	bc, (ix - 23)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 3)
	add	hl, de
	ld	bc, (ix - 13)
	jq	BB8_23
BB8_19:
	ld	iy, (ix - 16)
	lea	hl, iy
	ld	de, -1
	or	a, a
	sbc	hl, de
	jq	nz, BB8_32
	ld	iy, (ix - 6)
	ld	a, (iy + 2)
	ld	iy, (ix - 20)
	ld	c, (iy + 2)
	cp	a, c
	jq	nc, BB8_22
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	l, c
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	ld	hl, (ix - 6)
	ld	de, (hl)
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, e
	ld	h, d
	ld	de, (iy)
	ld	c, e
	ld	b, d
	or	a, a
	sbc	hl, bc
	jq	BB8_18
BB8_22:
	ld	bc, (ix - 13)
	ld	hl, 10000
BB8_23:
	ld	e, 1
BB8_24:
	ld	(ix - 3), hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	a, e
	ld	l, 0
	jq	m, BB8_26
	ld	a, l
BB8_26:
	bit	0, a
	ld	h, (ix - 10)
	ld	l, h
	jq	nz, BB8_28
	ld	l, (ix - 17)
BB8_28:
	bit	0, a
	ld	de, (ix - 3)
	jq	nz, BB8_30
	push	bc
	pop	de
BB8_30:
	ld	(ix - 13), de
	ld	a, l
	ld	bc, (ix - 26)
BB8_31:
	dec	bc
	inc	h
	ld	(ix - 10), h
	ld	iy, (ix - 6)
	lea	iy, iy + 28
	ld	(ix - 6), iy
	ld	de, (ix - 13)
	jq	BB8_8
BB8_32:
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	ld	bc, 10000
	ld	hl, (ix - 3)
	jq	nz, BB8_24
	ld	iy, (ix - 6)
	ld	c, (iy + 2)
	ld	iy, (ix - 20)
	ld	a, (iy + 2)
	cp	a, c
	jq	nc, BB8_35
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, a
	ld	l, c
	or	a, a
	sbc	hl, de
	ld	(ix - 3), hl
	ld	hl, (ix - 6)
	ld	de, (hl)
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, e
	ld	h, d
	ld	de, (iy)
	ld	c, e
	ld	b, d
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	bc, (ix - 23)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 3)
	add	hl, de
	ld	e, 1
	ld	bc, (ix - 13)
	jq	BB8_24
BB8_35:
	ld	bc, (ix - 13)
	ld	hl, 10000
	jq	BB8_24
BB8_36:
	ld	bc, 5000
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB8_38
	ld	(_optix_buttoninfo+1), a
BB8_38:
	xor	a, a
	ld	(_optix_guidata+2), a
BB8_39:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_ClickButton
_optix_ClickButton:
	ld	hl, -720868
	ld.sis	bc, 1
	ld	iy, (_optix_button)
	ld	a, (_optix_buttoninfo+1)
	ld	e, a
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	call	__sand
	ld	a, (_optix_guidata+2)
	ld	c, a
	ld	d, 1
	ld	a, l
	xor	a, d
	bit	0, a
	jq	nz, BB9_3
	ld	a, c
	or	a, a
	jq	z, BB9_3
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	bc, 28
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy + 24)
	call	__indcallhl
	xor	a, a
	ld	(_optix_guidata+2), a
BB9_3:
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_WhiText
_optix_WhiText:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextTransparentColor
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_BlaText
_optix_BlaText:
	ld	hl, -1
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, -1
	push	hl
	call	_gfx_SetTextTransparentColor
	pop	hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_CusText
_optix_CusText:
	ld	hl, -4
	call	__frameset
	ld	a, (ix + 6)
	ld	hl, _optix_guicolors
	ld	(ix - 4), a
	bit	0, a
	jq	nz, BB12_1
	ld	de, 5
	jq	BB12_3
BB12_1:
	ld	de, 7
BB12_3:
	add	hl, de
	ld	(ix - 3), hl
	ld	a, (hl)
	ld	l, a
	push	hl
	call	_gfx_SetTextBGColor
	pop	hl
	ld	a, (_optix_guicolors+6)
	ld	l, a
	ld	a, (_optix_guicolors+4)
	bit	0, (ix - 4)
	jq	nz, BB12_5
	ld	l, a
BB12_5:
	push	hl
	call	_gfx_SetTextFGColor
	pop	hl
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	(ix + 6), a
	ld	sp, ix
	pop	ix
	jp	_gfx_SetTextTransparentColor
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_SetDefaultColors
_optix_SetDefaultColors:
	ld	l, -1
	ld	e, 0
	ld	c, -32
	ld	h, 74
	ld	a, l
	ld	(_optix_guicolors), a
	ld	(_optix_guicolors+1), a
	ld	a, e
	ld	(_optix_guicolors+2), a
	ld	(_optix_guicolors+4), a
	ld	a, l
	ld	(_optix_guicolors+5), a
	ld	(_optix_guicolors+6), a
	ld	a, e
	ld	(_optix_guicolors+7), a
	ld	a, c
	ld	(_optix_guicolors+3), a
	ld	a, h
	ld	(_optix_guicolors+8), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_SetDefaultSettings
_optix_SetDefaultSettings:
	ld	de, 0
	xor	a, a
	ld	hl, _optix_guidata+5
	ld	iyl, 10
	ld	iyh, 1
	ld	(_optix_cursor), de
	ld	(_optix_cursor+3), a
	ld	(_optix_guidata+5), a
	push	hl
	pop	de
	inc	de
	ld	bc, 5
	ldir
	ld	a, iyl
	ld	(_optix_guisettings+2), a
	ld	a, iyh
	ld	(_optix_buttoninfo+1), a
	ld	(_optix_guidata+2), a
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_VertScrollbar
_optix_VertScrollbar:
	call	__frameset0
	ld	e, (ix + 12)
	ld	a, (ix + 15)
	ld	d, (ix + 21)
	ld	b, (ix + 24)
	or	a, a
	sbc	hl, hl
	ld	l, (ix + 18)
	ld	iy, 1
	push	iy
	ld	c, b
	push	bc
	ld	c, d
	push	bc
	push	hl
	ld	l, a
	push	hl
	ld	l, e
	push	hl
	ld	l, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_optix_Scrollbar
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_Scrollbar
_optix_Scrollbar:
	ld	hl, -21
	call	__frameset
	ld	a, (ix + 15)
	inc	a
	ld	(ix - 9), a
	ld	a, (_optix_guicolors+1)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, (ix + 9)
	ld	(ix - 3), de
	ld	l, (ix + 21)
	ld	(ix - 6), hl
	push	hl
	ld	hl, (ix + 18)
	push	hl
	push	de
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_guicolors+2)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix + 18)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	l, 1
	ld	a, (ix + 24)
	xor	a, l
	bit	0, a
	jq	nz, BB16_2
	ld	a, (_optix_guicolors+3)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
BB16_2:
	ld	a, (ix + 27)
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, (ix + 12)
	ld	c, (ix - 9)
	push	bc
	pop	de
	dec	de
	ld	(ix - 12), hl
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	(ix - 18), bc
	jq	p, BB16_3
	ld	iy, (ix + 6)
	ld	de, 2
	add	iy, de
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	(ix - 15), iy
	jq	nz, BB16_11
	ld	iy, (ix - 3)
	add	iy, de
	ld	b, 0
	ld	c, (ix + 21)
	ld	l, c
	ld	h, b
	ld.sis	de, -4
	add.sis	hl, de
	ld	c, (ix - 9)
	call	__sdivs
	ld	c, l
	ld	b, h
	ld	a, b
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	d, a
	ld	e, c
	push	de
	pop	hl
	ld	bc, (ix - 12)
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 18)
	ld	bc, -4
	add	hl, bc
	push	de
	push	hl
	push	iy
	ld	hl, (ix - 15)
	jq	BB16_12
BB16_3:
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	iy, (ix + 6)
	jq	nz, BB16_5
	ld	de, 2
	add	iy, de
	ld	b, 0
	ld	c, (ix + 21)
	ld	l, c
	ld	h, b
	ld.sis	de, -4
	add.sis	hl, de
	ld	c, (ix - 9)
	call	__sdivs
	ld	e, l
	ld	d, h
	ld	a, d
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	b, a
	ld	c, e
	ld	hl, (ix - 3)
	ld	de, -2
	add	hl, de
	ld	de, (ix - 6)
	add	hl, de
	or	a, a
	sbc	hl, bc
	ld	(ix - 12), hl
	ld	hl, (ix + 18)
	ld	de, -4
	add	hl, de
	push	bc
	push	hl
	ld	hl, (ix - 12)
	push	hl
	push	iy
	jq	BB16_6
BB16_11:
	ld	hl, (ix + 18)
	ld	de, -4
	add	hl, de
	call	__idivu
	push	hl
	pop	de
	ld	bc, (ix - 12)
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 21), iy
	ld	iy, (ix - 3)
	ld	bc, 2
	add	iy, bc
	ld	hl, (ix - 6)
	ld	bc, -4
	add	hl, bc
	push	hl
	push	de
	push	iy
	ld	hl, (ix - 21)
BB16_12:
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_guicolors+8)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (ix + 27)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB16_14
	ld	iy, (ix - 3)
	ld	de, 2
	add	iy, de
	ld	b, 0
	ld	c, (ix + 21)
	ld	l, c
	ld	h, b
	ld.sis	de, -4
	add.sis	hl, de
	ld	c, (ix - 9)
	call	__sdivs
	ld	c, l
	ld	b, h
	ld	a, b
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	de
	ld	d, a
	ld	e, c
	push	de
	pop	hl
	ld	bc, (ix - 12)
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (ix + 18)
	ld	bc, -4
	add	hl, bc
	push	de
	push	hl
	jq	BB16_15
BB16_5:
	ld	hl, (ix + 18)
	ld	de, -4
	add	hl, de
	call	__idivu
	push	hl
	pop	de
	lea	hl, iy
	ld	bc, -2
	add	hl, bc
	ld	bc, (ix + 18)
	add	hl, bc
	or	a, a
	sbc	hl, de
	ld	(ix - 12), hl
	ld	iy, (ix - 3)
	ld	bc, 2
	add	iy, bc
	ld	hl, (ix - 6)
	ld	bc, -4
	add	hl, bc
	push	hl
	push	de
	push	iy
	ld	hl, (ix - 12)
	push	hl
BB16_6:
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_guicolors+8)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	a, (ix + 27)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB16_8
	ld	iy, (ix + 6)
	ld	de, 2
	add	iy, de
	ld	b, 0
	ld	c, (ix + 21)
	ld	l, c
	ld	h, b
	ld.sis	de, -4
	add.sis	hl, de
	ld	c, (ix - 9)
	call	__sdivs
	ld	e, l
	ld	d, h
	ld	a, d
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	b, a
	ld	c, e
	ld	hl, (ix - 3)
	ld	de, -2
	add	hl, de
	ld	de, (ix - 6)
	add	hl, de
	or	a, a
	sbc	hl, bc
	ld	(ix - 3), hl
	ld	hl, (ix + 18)
	ld	de, -4
	add	hl, de
	push	bc
	push	hl
	ld	hl, (ix - 3)
	push	hl
	push	iy
	jq	BB16_17
BB16_14:
	ld	hl, (ix + 18)
	ld	de, -4
	add	hl, de
	ld	bc, (ix - 18)
	call	__idivu
	push	hl
	pop	de
	ld	bc, (ix - 12)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 15)
	add	hl, bc
	ld	(ix - 15), hl
	ld	iy, (ix - 3)
	ld	bc, 2
	add	iy, bc
	ld	hl, (ix - 6)
	ld	bc, -4
	add	hl, bc
	push	hl
	push	de
BB16_15:
	push	iy
	ld	hl, (ix - 15)
	jq	BB16_16
BB16_8:
	ld	iy, (ix + 18)
	lea	hl, iy
	ld	de, -4
	add	hl, de
	ld	bc, (ix - 18)
	call	__idivu
	push	hl
	pop	de
	ld	hl, (ix + 6)
	ld	bc, -2
	add	hl, bc
	lea	bc, iy
	add	hl, bc
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	ld	iy, (ix - 3)
	ld	bc, 2
	add	iy, bc
	ld	hl, (ix - 6)
	ld	bc, -4
	add	hl, bc
	push	hl
	push	de
	push	iy
	ld	hl, (ix - 9)
BB16_16:
	push	hl
BB16_17:
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_HorizScrollbar
_optix_HorizScrollbar:
	call	__frameset0
	ld	e, (ix + 12)
	ld	a, (ix + 15)
	ld	hl, (ix + 18)
	ld	d, (ix + 21)
	ld	b, (ix + 24)
	ld	iy, 0
	push	iy
	ld	c, b
	push	bc
	ld	c, d
	push	bc
	push	hl
	ld	l, a
	push	hl
	ld	l, e
	push	hl
	ld	l, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_optix_Scrollbar
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderWindow
_optix_RenderWindow:
	ld	hl, -18
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix - 12), hl
	ld	hl, (ix + 9)
	ld	a, (ix + 12)
	ld	iy, 120
	ld	c, 1
	ld	de, 0
	ld	(ix - 3), de
	ld	e, l
	ld	d, h
	ld	(ix - 6), de
	call	__sshru
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix - 15), hl
	ld	bc, 12
	add	hl, bc
	ld	c, 1
	call	__ishru
	push	hl
	pop	bc
	lea	hl, iy
	or	a, a
	sbc	hl, bc
	ld	(ix - 18), hl
	ld	a, (_optix_guicolors+1)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld.sis	hl, 160
	ld	de, (ix - 9)
	or	a, a
	sbc.sis	hl, de
	ld.sis	bc, 255
	call	__sand
	ld	de, (ix - 3)
	ld	e, l
	ld	d, h
	ld	(ix - 3), de
	ld	hl, (ix - 18)
	ld	bc, 255
	call	__iand
	ld	(ix - 9), hl
	push	hl
	pop	iy
	ld	de, 12
	add	iy, de
	ld	hl, (ix - 15)
	push	hl
	ld	de, (ix - 6)
	push	de
	push	iy
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_guicolors+2)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 9)
	ld	de, 11
	add	hl, de
	ld	de, (ix - 15)
	inc	de
	push	de
	ld	de, (ix - 6)
	push	de
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 9)
	push	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	call	_optix_CusText
	pop	hl
	ld	hl, (ix - 12)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	push	hl
	pop	de
	ld	hl, 160
	or	a, a
	sbc	hl, de
	ld	de, 2
	ld	iy, (ix - 9)
	add	iy, de
	ld	de, (ix - 12)
	ld	(ix + 6), de
	ld	(ix + 9), hl
	ld	(ix + 12), iy
	ld	sp, ix
	pop	ix
	jp	_gfx_PrintStringXY
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_WordWrap
_optix_WordWrap:
	ld	hl, -237
	call	__frameset
	ld	bc, -207
	lea	iy, ix
	add	iy, bc
	ld	bc, -231
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, ix - 7
	push	ix
	ld	bc, -225
	add	ix, bc
	ld	(ix), hl
	pop	ix
	lea	hl, ix - 107
	lea	de, iy
	ld	bc, -210
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	ix
	ld	de, -213
	add	ix, de
	ld	(ix), hl
	pop	ix
	inc	hl
	ld	(ix - 106), 0
	push	hl
	pop	iy
	inc	iy
	ld	bc, 98
	lea	de, iy
	ldir
	ld	bc, -231
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy), 0
	ld	bc, -210
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	push	hl
	pop	de
	inc	de
	ld	bc, 99
	ldir
	ld	(ix - 7), 0
	ld	hl, (ix + 6)
	push	hl
	call	_optix_GetStringLength
	ld.sis	bc, 0
	ld	de, -228
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	de, (ix + 9)
	ld	l, e
	ld	h, d
	push	ix
	ld	de, -219
	add	ix, de
	ld	(ix), hl
	pop	ix
BB19_1:
	ld	(ix - 107), 0
	xor	a, a
	ld	iyl, a
BB19_2:
	ld	de, 0
	ld	e, c
	ld	d, b
	ld	hl, (ix + 6)
	add	hl, de
	ld	a, (hl)
	cp	a, 32
	jq	z, BB19_9
	push	ix
	ld	de, -216
	add	ix, de
	ld	(ix), bc
	pop	ix
	cp	a, 96
	push	ix
	ld	de, -213
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix)
	pop	ix
	push	ix
	ld	de, -222
	push	af
	add	ix, de
	pop	af
	push	af
	ld	a, iyl
	ld	(ix), a
	pop	af
	pop	ix
	jq	nz, BB19_6
	ld	de, -237
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	push	bc
	call	_gfx_GetStringWidth
	ld	bc, -234
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -210
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	bc, -234
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	ex	de, hl
	ld	bc, -219
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	jq	nc, BB19_17
	ld	de, -237
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	a, (hl)
	ld	de, -213
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	ld	de, -222
	lea	iy, ix
	add	iy, de
	push	af
	ld	a, (iy)
	ld	iyl, a
	pop	af
BB19_6:
	ld	de, 0
	ld	e, iyl
	push	bc
	pop	hl
	add	hl, de
	ld	(ix - 3), bc
	ld	bc, -234
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	(hl), a
	inc	de
	ld	bc, (ix - 3)
	push	bc
	pop	hl
	add	hl, de
	ld	(hl), 0
	push	bc
	call	_gfx_GetStringWidth
	pop	de
	ld	bc, -219
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	or	a, a
	sbc	hl, de
	jq	nc, BB19_7
	ld	de, -222
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	inc	a
	ld	de, -216
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	inc.sis	bc
	or	a, a
	sbc	hl, hl
	ld	l, c
	ld	h, b
	ld	(ix - 3), bc
	push	ix
	ld	bc, -228
	add	ix, bc
	ld	de, (ix)
	pop	ix
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	iyl, a
	ld	bc, (ix - 3)
	jq	m, BB19_2
	jq	BB19_9
BB19_7:
	ld	bc, -234
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(hl), 0
	ld	bc, -216
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	dec.sis	hl
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	ld	bc, -225
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -213
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_AddWordWrapLine
	ld	de, -216
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	pop	hl
	pop	hl
	ld	de, -231
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(iy), 0
	ld	(ix - 107), 0
	ld	de, -222
	lea	iy, ix
	add	iy, de
	push	af
	ld	a, (iy)
	ld	iyl, a
	pop	af
	jq	BB19_9
BB19_17:
	ld	de, 0
	ld	bc, -222
	lea	hl, ix
	add	hl, bc
	ld	e, (hl)
	ld	(ix - 3), de
	ld	de, -213
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	push	bc
	pop	hl
	ld	de, (ix - 3)
	add	hl, de
	ld	(hl), 0
	push	bc
	ld	bc, -210
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strcat
	pop	hl
	pop	hl
	ld	bc, -225
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -210
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_AddWordWrapLine
	pop	hl
	pop	hl
	ld	de, -231
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	ld	(iy), 0
	ld	de, -222
	lea	iy, ix
	add	iy, de
	push	af
	ld	a, (iy)
	ld	iyl, a
	pop	af
	ld	(ix - 107), 0
	push	ix
	ld	de, -216
	add	ix, de
	ld	bc, (ix)
	pop	ix
BB19_9:
	ld	de, 0
	ld	e, c
	ld	d, b
	ld	hl, (ix + 6)
	add	hl, de
	ld	a, (hl)
	cp	a, 96
	ld	de, -216
	lea	hl, ix
	push	af
	add	hl, de
	pop	af
	ld	(hl), bc
	jq	nz, BB19_11
	ld	de, -213
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	jq	BB19_12
BB19_11:
	ld	de, 0
	ld	e, iyl
	inc	iyl
	ld	(ix - 3), de
	ld	de, -213
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	de, (ix - 3)
	add	hl, de
	ld	(hl), 32
BB19_12:
	ld	de, 0
	ld	e, iyl
	push	bc
	pop	hl
	add	hl, de
	ld	(hl), 0
	push	bc
	call	_gfx_GetStringWidth
	ld	bc, -222
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	pop	hl
	ld	bc, -210
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	bc, -222
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	add	hl, de
	ex	de, hl
	ld	bc, -219
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	jq	nc, BB19_13
	ld	bc, -225
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -210
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_AddWordWrapLine
	pop	hl
	pop	hl
	ld	bc, -213
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -210
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strcpy
	jq	BB19_15
BB19_13:
	ld	bc, -213
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -210
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strcat
BB19_15:
	pop	hl
	pop	hl
	ld	de, -216
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	inc.sis	bc
	or	a, a
	sbc	hl, hl
	ld	l, c
	ld	h, b
	ld	(ix - 3), bc
	ld	bc, -228
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	bc, (ix - 3)
	jq	m, BB19_1
	ld	bc, -225
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	ld	bc, -210
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_AddWordWrapLine
	pop	hl
	pop	hl
	ld	a, (ix - 7)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_GetStringLength
_optix_GetStringLength:
	call	__frameset0
	ld	de, 0
BB20_1:
	ld	hl, (ix + 6)
	add	hl, de
	inc	de
	ld	a, (hl)
	or	a, a
	jq	nz, BB20_1
	dec	de
	ex	de, hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_AddWordWrapLine
_optix_AddWordWrapLine:
	ld	hl, -1
	call	__frameset
	ld	iy, (ix + 9)
	ld	bc, 201
	ld	de, (_optix_wordwraptext)
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	call	__imulu
	add	hl, bc
	push	hl
	push	de
	call	_realloc
	push	hl
	pop	iy
	pop	hl
	pop	hl
	ld	(_optix_wordwraptext), iy
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB21_2
	ld	de, (ix + 6)
	ld	hl, (ix + 9)
	ld	a, (hl)
	ld	(ix - 1), a
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 201
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	push	de
	push	iy
	call	_strcpy
	pop	hl
	pop	hl
	ld	a, (ix - 1)
	inc	a
	ld	hl, (ix + 9)
	ld	(hl), a
BB21_2:
	inc	sp
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_PrintWordWrap
_optix_PrintWordWrap:
	ld	hl, -240
	call	__frameset
	ld	bc, -206
	lea	iy, ix
	add	iy, bc
	ld	de, 0
	ld	bc, -221
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	lea	hl, iy
	ld	bc, -218
	lea	iy, ix
	add	iy, bc
	ld	(iy), hl
	push	de
	call	_optix_CusText
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, (ix + 21)
	ld	bc, -209
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	push	hl
	pop	de
	ld	e, (ix + 18)
	push	ix
	ld	bc, -215
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	hl
	pop	de
	ld	e, (ix + 9)
	push	hl
	pop	iy
	push	af
	ld	a, (ix + 12)
	ld	iyl, a
	pop	af
	ld	l, (ix + 15)
	push	ix
	ld	bc, -212
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (ix + 6)
	ld	c, 1
	call	__sshru
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	(ix - 3), bc
	ld	bc, -227
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	bc, (ix - 3)
	add	hl, bc
	push	ix
	ld	bc, -233
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, -230
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	de, -9
	add	iy, de
	push	ix
	ld	bc, -212
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	iy, de
	push	ix
	ld	de, -215
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	bc, 201
	call	__imulu
	push	ix
	ld	de, -209
	add	ix, de
	ld	bc, (ix)
	pop	ix
	xor	a, a
	push	ix
	ld	de, -215
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, 0
BB22_1:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nc, BB22_9
	ld	l, (ix + 21)
	cp	a, l
	jq	nc, BB22_9
	ld	bc, -224
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	push	ix
	ld	bc, -236
	add	ix, bc
	ld	(ix), iy
	pop	ix
	or	a, a
	sbc	hl, hl
	ld	bc, -240
	lea	iy, ix
	add	iy, bc
	ld	(iy), a
	ld	l, a
	push	ix
	inc	bc
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	hl, (_optix_wordwraptext)
	push	ix
	ld	bc, -215
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	push	hl
	ld	bc, -218
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_strcpy
	pop	hl
	pop	hl
	ld	bc, -221
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, 126
	jq	nz, BB22_4
	ld	de, -209
	lea	hl, ix
	add	hl, de
	ld	bc, (hl)
	push	bc
	pop	hl
	ld	(ix - 3), bc
	ld	bc, -239
	lea	iy, ix
	add	iy, bc
	ld	de, (iy)
	or	a, a
	sbc	hl, de
	ld	de, 2
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	bc, (ix - 3)
	jq	m, BB22_6
	ld	bc, -221
	lea	hl, ix
	add	hl, bc
	ld	iy, (hl)
	ld	(iy), 32
	ld	hl, 2
	push	hl
	push	hl
	call	_gfx_SetTextScale
	pop	hl
	pop	hl
	ld	bc, -218
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	de, 4
	add	hl, de
	ld	c, 1
	call	__ishru
	push	hl
	pop	de
	ld	(ix - 3), bc
	ld	bc, -233
	lea	iy, ix
	add	iy, bc
	ld	hl, (iy)
	or	a, a
	sbc	hl, de
	push	hl
	pop	iy
	push	ix
	ld	de, -239
	add	ix, de
	ld	hl, (ix)
	pop	ix
	ld	bc, (ix - 3)
	push	ix
	ld	de, -212
	add	ix, de
	ld	bc, (ix)
	pop	ix
	call	__imulu
	push	hl
	pop	bc
	push	ix
	ld	de, -236
	add	ix, de
	ld	hl, (ix)
	pop	ix
	add	hl, bc
	push	hl
	push	iy
	ld	bc, -218
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	push	hl
	call	_gfx_SetTextScale
	ld	de, -236
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	push	ix
	ld	de, -209
	add	ix, de
	ld	bc, (ix)
	pop	ix
	pop	hl
	pop	hl
	ld	de, -240
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	inc	a
	jq	BB22_8
BB22_4:
	ld	de, -239
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	de, -212
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	call	__imulu
	ld	(ix - 3), bc
	push	ix
	ld	bc, -230
	add	ix, bc
	ld	de, (ix)
	pop	ix
	add	hl, de
	push	hl
	ld	de, -227
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	de, -218
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	bc, (ix - 3)
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	de, -240
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	ld	de, -209
	lea	iy, ix
	add	iy, de
	ld	bc, (iy)
	push	ix
	ld	de, -236
	add	ix, de
	ld	iy, (ix)
	pop	ix
	jq	BB22_8
BB22_6:
	ld	de, -240
	lea	hl, ix
	add	hl, de
	ld	a, (hl)
	ld	de, -236
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
BB22_8:
	push	ix
	ld	de, -224
	add	ix, de
	ld	hl, (ix)
	pop	ix
	inc	a
	inc	hl
	push	ix
	add	ix, de
	ld	(ix), hl
	pop	ix
	ld	de, 201
	ld	(ix - 3), bc
	ld	bc, -215
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	add	hl, de
	push	ix
	ld	bc, -224
	add	ix, bc
	ld	de, (ix)
	pop	ix
	push	ix
	ld	bc, -215
	add	ix, bc
	ld	(ix), hl
	pop	ix
	ld	bc, (ix - 3)
	jq	BB22_1
BB22_9:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_Message
_optix_Message:
	ld	hl, -39
	call	__frameset
	ld	hl, (ix + 9)
	ld	bc, (ix + 15)
	ld.sis	de, 32
	ld	(ix - 2), e
	ld	(ix - 1), d
	push	bc
	push	hl
	call	_optix_WordWrap
	pop	hl
	pop	hl
	ld	l, (ix + 18)
	cp	a, l
	ld	(ix - 6), a
	ld	e, a
	jq	c, BB23_2
	ld	e, (ix + 18)
BB23_2:
	lea	hl, ix - 2
	ld	(ix - 33), hl
	ld	iy, 0
	lea	hl, iy
	ld	bc, (ix + 15)
	ld	l, c
	ld	h, b
	ld	(ix - 9), hl
	ld	bc, 6
	add	hl, bc
	ld	(ix - 18), hl
	ld	a, 1
	ld	c, a
	call	__ishru
	ld	(ix - 5), hl
	lea	hl, iy
	ld	(ix - 15), de
	ld	l, e
	lea	bc, iy
	ld	c, (ix + 12)
	ld	(ix - 21), hl
	call	__imulu
	ld	(ix - 24), hl
	ld	de, 18
	add	hl, de
	ld	c, a
	call	__ishru
	ld	(ix - 12), hl
BB23_3:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB23_4
	call	_kb_Scan
	jq	BB23_3
BB23_4:
	ld	de, 0
	ld	e, (ix - 6)
	ld	hl, 160
	ld	bc, (ix - 5)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	hl, 120
	ld	bc, (ix - 12)
	or	a, a
	sbc	hl, bc
	ld	(ix - 27), hl
	ex	de, hl
	ld	de, (ix - 21)
	or	a, a
	sbc	hl, de
	ld	(ix - 36), hl
	ld	hl, (ix - 24)
	ld	a, l
	add	a, 6
	ld	l, a
	ld	(ix - 21), hl
	lea	hl, iy
	ld	iy, 255
	lea	bc, iy
	call	__iand
	push	hl
	pop	de
	ld	hl, (ix - 9)
	ld	bc, 3
	add	hl, bc
	add	hl, de
	ld	(ix - 9), hl
	ld	hl, (ix - 27)
	lea	bc, iy
	call	__iand
	ld	de, 3
	add	hl, de
	ld	(ix - 39), hl
	ld	a, -90
	ld	hl, (ix - 5)
	sub	a, l
	ld	l, a
	ld	(ix - 24), hl
	ld	a, -120
	ld	hl, (ix - 12)
	sub	a, l
	ld	l, a
	ld	(ix - 27), hl
	ld	e, 1
	ld	l, (ix + 12)
	ld	(ix - 30), hl
	xor	a, a
	ld	l, a
	ld	(ix - 5), hl
	ld	a, 1
	ld	d, a
BB23_5:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, e
	bit	0, a
	jq	z, BB23_32
	ld	(ix - 12), d
	call	_kb_Scan
	ld	a, (ix + 18)
	ld	l, (ix - 6)
	cp	a, l
	jq	nc, BB23_20
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	de, (ix - 5)
	ld	a, e
	or	a, a
	ld	a, 1
	push	af
	ld	a, (ix - 12)
	ld	iyl, a
	pop	af
	jq	z, BB23_9
	ld	a, 0
BB23_9:
	bit	3, l
	ld	d, 1
	ld	e, d
	ld	l, e
	jq	z, BB23_11
	ld	l, a
BB23_11:
	ld	a, iyl
	and	a, 1
	xor	a, d
	bit	0, l
	ld	l, e
	jq	nz, BB23_13
	ld	l, a
BB23_13:
	ld	a, l
	xor	a, e
	ld	b, 7
	call	__bshl
	rlc	a
	sbc	a, a
	ld	e, a
	ld	bc, (ix - 5)
	ld	a, c
	add	a, e
	ld	c, a
	ld	(ix - 5), bc
	bit	0, l
	jq	nz, BB23_15
	ld	iyl, 0
BB23_15:
	push	af
	ld	a, iyl
	ld	(ix - 12), a
	pop	af
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, d
	bit	0, a
	jq	nz, BB23_20
	or	a, a
	sbc	hl, hl
	ld	iy, (ix - 5)
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	ld	a, (ix - 12)
	and	a, 1
	xor	a, d
	ld	bc, (ix - 36)
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	e, 1
	ld	l, e
	jq	p, BB23_18
	ld	l, a
BB23_18:
	ld	a, l
	xor	a, e
	and	a, 1
	ld	e, a
	ld	a, iyl
	add	a, e
	ld	e, a
	ld	(ix - 5), de
	bit	0, l
	jq	nz, BB23_20
	xor	a, a
	ld	(ix - 12), a
BB23_20:
	call	_kb_AnyKey
	or	a, a
	ld	a, 1
	jq	z, BB23_22
	ld	a, (ix - 12)
BB23_22:
	ld	(ix - 12), a
	ld	hl, (ix - 21)
	push	hl
	ld	hl, (ix - 18)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_optix_RenderWindow
	pop	hl
	pop	hl
	pop	hl
	ld	a, (ix + 18)
	ld	l, (ix - 6)
	cp	a, l
	jq	nc, BB23_31
	ld	iy, 0
	ld	de, (ix - 5)
	ld	iyl, e
	ld	a, e
	or	a, a
	jq	z, BB23_26
	lea	hl, iy
	ld	bc, (ix - 36)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB23_26
	ld	(ix - 2), 18
	jq	BB23_30
BB23_26:
	ld	a, e
	or	a, a
	jq	nz, BB23_27
	lea	hl, iy
	ld	de, (ix - 36)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB23_30
	ld	(ix - 2), 25
	jq	BB23_30
BB23_27:
	ld	(ix - 2), 24
BB23_30:
	ld	hl, (ix - 33)
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, (ix - 9)
	or	a, a
	sbc	hl, de
	ld	de, (ix - 39)
	push	de
	push	hl
	ld	hl, (ix - 33)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
BB23_31:
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 5)
	push	hl
	ld	hl, (ix - 30)
	push	hl
	ld	hl, (ix - 27)
	push	hl
	ld	hl, (ix - 24)
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_optix_PrintWordWrap
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	ld	d, (ix - 12)
	ld	e, 1
	jq	BB23_5
BB23_32:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB23_34
	call	_kb_Scan
	jq	BB23_32
BB23_34:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_Dialogue
_optix_Dialogue:
	ld	hl, -23
	call	__frameset
	ld	hl, (ix + 9)
	ld	bc, (ix + 15)
	ld.sis	de, 32
	ld	(ix - 2), e
	ld	(ix - 1), d
	push	bc
	push	hl
	call	_optix_WordWrap
	pop	hl
	pop	hl
	ld	l, (ix + 18)
	cp	a, l
	ld	(ix - 14), a
	ld	iyl, a
	jq	c, BB24_2
	push	af
	ld	a, (ix + 18)
	ld	iyl, a
	pop	af
BB24_2:
	ld	de, 0
	push	de
	pop	bc
	ld	hl, (ix + 15)
	ld	c, l
	ld	b, h
	ld	(ix - 23), bc
	push	bc
	pop	hl
	ld	bc, 6
	add	hl, bc
	ld	(ix - 17), hl
	ld	a, 1
	ld	c, a
	call	__ishru
	ld	(ix - 5), hl
	push	de
	pop	hl
	ld	(ix - 11), iy
	ex	de, hl
	ld	e, iyl
	ex	de, hl
	ld	e, (ix + 12)
	push	de
	pop	bc
	call	__imulu
	ld	(ix - 20), hl
	ld	de, 18
	add	hl, de
	ld	c, a
	call	__ishru
	ld	(ix - 8), hl
	ld	a, (_optix_guicolors+1)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 20)
	ld	a, l
	add	a, 6
	ld	l, a
	push	hl
	ld	hl, (ix - 17)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_optix_RenderWindow
	pop	hl
	pop	hl
	pop	hl
	ld	a, (ix + 18)
	ld	l, (ix - 14)
	cp	a, l
	jq	nc, BB24_4
	ld	hl, 120
	ld	de, 160
	ld	iy, 255
	lea	bc, ix - 2
	ld	(ix - 14), bc
	ld	bc, (ix - 8)
	or	a, a
	sbc	hl, bc
	ld	(ix - 17), hl
	ex	de, hl
	ld	de, (ix - 5)
	or	a, a
	sbc	hl, de
	ld	(ix - 2), 25
	lea	bc, iy
	call	__iand
	ld	(ix - 20), hl
	ld	hl, (ix - 14)
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, (ix - 23)
	ld	bc, 3
	add	hl, bc
	ld	bc, (ix - 20)
	add	hl, bc
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix - 17)
	ld	bc, 255
	call	__iand
	ld	bc, 3
	add	hl, bc
	push	hl
	push	de
	ld	hl, (ix - 14)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
BB24_4:
	ld	a, -90
	ld	hl, (ix - 5)
	sub	a, l
	ld	l, a
	ld	a, -120
	ld	de, (ix - 8)
	sub	a, e
	ld	e, a
	ld	bc, (ix - 11)
	push	bc
	ld	bc, 0
	push	bc
	ld	c, (ix + 12)
	push	bc
	push	de
	push	hl
	ld	hl, (ix + 15)
	push	hl
	call	_optix_PrintWordWrap
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_Menu
_optix_Menu:
	ld	hl, -44
	call	__frameset
	ld	de, (ix + 9)
	ld.sis	hl, 32
	ld	bc, 0
	ld	(ix - 2), l
	ld	(ix - 1), h
	push	bc
	push	de
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	push	hl
	call	_optix_AddMenu
	push	hl
	pop	de
	ld	hl, 30
	add	hl, sp
	ld	sp, hl
	push	de
	pop	hl
	ld	bc, 255
	call	__iand
	ld	(ix - 26), hl
	ld	a, l
	ld	l, (ix + 18)
	cp	a, l
	ld	a, l
	jq	c, BB25_2
	ld	e, a
BB25_2:
	ld	(ix - 23), de
	lea	hl, ix - 2
	ld	(ix - 29), hl
	call	_optix_DeleteLastMenu
	ld	hl, (ix + 15)
	ld	iyl, 1
	ld	c, iyl
	call	__sshru
	ld	a, -96
	sub	a, l
	ld	(ix - 5), a
	ld	iy, 0
	lea	hl, iy
	ld	de, (ix - 23)
	ld	l, e
	lea	bc, iy
	ld	a, (ix + 12)
	ld	c, a
	ld	(ix - 35), hl
	call	__imulu
	ld	(ix - 11), hl
	ld	de, 12
	add	hl, de
	ld	c, 1
	call	__ishru
	ld	a, -124
	ld	(ix - 8), hl
	sub	a, l
	ld	l, a
	ld	de, 0
	push	de
	ld	de, (ix + 9)
	push	de
	ld	e, (ix + 12)
	push	de
	ld	de, (ix + 15)
	push	de
	ld	de, (ix - 23)
	push	de
	ld	de, 1
	push	de
	push	iy
	push	iy
	push	hl
	push	af
	ld	a, (ix - 5)
	ld	iyl, a
	pop	af
	push	iy
	call	_optix_AddMenu
	ld	hl, 30
	add	hl, sp
	ld	sp, hl
	ld	a, (_optix_guidata+1)
	dec	a
	ld	(ix - 14), a
	ld	(_optix_guidata), a
	ld	hl, (_optix_menu)
	ld	(ix - 41), hl
BB25_3:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB25_4
	call	_kb_Scan
	jq	BB25_3
BB25_4:
	ld	de, 0
	ld	hl, (ix + 15)
	ld	e, l
	ld	d, h
	ld	(ix - 38), de
	ld	hl, 120
	ld	bc, (ix - 8)
	or	a, a
	sbc	hl, bc
	ld	bc, 255
	call	__iand
	push	hl
	pop	de
	or	a, a
	sbc	hl, hl
	ld	l, (ix - 14)
	ld	bc, 31
	ld	(ix - 44), hl
	call	__imulu
	push	hl
	pop	bc
	ld	iy, (ix - 41)
	add	iy, bc
	ld	(ix - 17), iy
	ld	iy, 0
	push	af
	ld	a, (ix - 5)
	ld	iyl, a
	pop	af
	lea	hl, iy
	dec	hl
	ld	(ix - 5), hl
	push	de
	pop	hl
	ld	bc, 11
	add	hl, bc
	ld	(ix - 14), hl
	ld	hl, (ix - 38)
	ld	bc, 2
	add	hl, bc
	ld	(ix - 8), hl
	ld	hl, (ix - 11)
	add	hl, bc
	ld	(ix - 11), hl
	push	de
	pop	hl
	dec	hl
	ld	(ix - 32), hl
	ex	de, hl
	add	hl, bc
	ld	(ix - 20), hl
	ld	de, (ix - 38)
	add	iy, de
	ld	(ix - 38), iy
BB25_5:
	ld	iy, (ix - 17)
	ld	a, (iy + 17)
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	nz, BB25_8
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB25_8
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	z, BB25_17
BB25_8:
	call	_optix_UpdateCurrMenu
	ld	a, (_optix_guicolors+1)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 11)
	push	hl
	ld	hl, (ix - 8)
	push	hl
	ld	hl, (ix - 14)
	push	hl
	ld	hl, (ix - 5)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_guicolors+2)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 11)
	push	hl
	ld	hl, (ix - 8)
	push	hl
	ld	hl, (ix - 14)
	push	hl
	ld	hl, (ix - 5)
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, (ix - 8)
	push	hl
	ld	hl, (ix - 32)
	push	hl
	ld	hl, (ix - 5)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	call	_optix_CusText
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	push	hl
	pop	de
	ld	hl, 160
	or	a, a
	sbc	hl, de
	ld	de, (ix - 20)
	push	de
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 23)
	ld	a, l
	ld	hl, (ix - 26)
	cp	a, l
	jq	nc, BB25_16
	ld	iy, (ix - 17)
	ld	l, (iy + 18)
	ld	a, l
	or	a, a
	jq	nz, BB25_10
	ld	de, (iy + 14)
	ld	hl, (ix - 35)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB25_15
	ld	(ix - 2), 25
	jq	BB25_15
BB25_10:
	ld	de, 0
	ld	e, l
	ld	hl, (iy + 14)
	ld	bc, (ix - 35)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB25_12
	ld	(ix - 2), 18
	jq	BB25_15
BB25_12:
	ld	(ix - 2), 24
BB25_15:
	ld	hl, (ix - 29)
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, (ix - 38)
	or	a, a
	sbc	hl, de
	ld	de, (ix - 20)
	push	de
	push	hl
	ld	hl, (ix - 29)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
BB25_16:
	ld	a, (_optix_guidata)
	ld	l, a
	push	hl
	call	_optix_RenderMenu
	pop	hl
	call	_gfx_SwapDraw
	jq	BB25_5
BB25_17:
	ld	bc, 31
	ld	hl, (ix - 44)
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 41)
	add	iy, de
	ld	a, (iy + 12)
	ld	(ix - 5), a
	call	_optix_DeleteLastMenu
	ld	a, (ix - 5)
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_AddMenu
_optix_AddMenu:
	ld	hl, -136
	call	__frameset
	ld	iy, _optix_guidata+1
	lea	bc, ix - 106
	ld	(ix - 106), 0
	push	bc
	pop	hl
	inc	hl
	ex	de, hl
	ld	(ix - 112), bc
	push	bc
	pop	hl
	ld	bc, 99
	ldir
	ld	de, (_optix_menu)
	inc	(iy)
	or	a, a
	sbc	hl, hl
	ld	l, (iy)
	ld	bc, 31
	call	__imulu
	push	hl
	push	de
	call	_realloc
	pop	de
	pop	de
	ld	(_optix_menu), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB26_2
	ld	hl, -1
	jq	BB26_10
BB26_2:
	ld	de, 0
	push	hl
	pop	iy
	ld.sis	hl, 0
	ld	(ix - 118), hl
	ld	a, (_optix_guidata+1)
	or	a, a
	sbc	hl, hl
	ld	l, a
	dec	hl
	ld	bc, 31
	ld	(ix - 127), hl
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 124), iy
	add	iy, bc
	ld	a, (ix + 18)
	ld	(iy + 5), a
	ld	a, (ix + 21)
	ld	(iy + 6), a
	ld	a, (ix + 24)
	ld	(iy + 7), a
	ld	a, (ix + 27)
	ld	(iy + 8), a
	ld	(iy + 18), 0
	ld	hl, (ix + 6)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix + 9)
	ld	(iy + 2), a
	ld	a, (ix + 12)
	ld	(iy + 3), a
	ld	a, (ix + 15)
	ld	(iy + 4), a
	ld	(iy + 17), 0
	ld	(iy + 12), 0
	ld	(ix - 115), de
	ld	(iy + 9), de
	ld	hl, 65793
	ld	(iy + 19), hl
	ld	a, 1
	ld	(iy + 22), a
	or	a, a
	sbc	hl, hl
	ld	(ix - 109), hl
	ld	(iy + 23), hl
	xor	a, a
	ld	(iy + 26), a
	ld	hl, (ix + 33)
	ld	(iy + 27), hl
	ld	bc, -130
	lea	hl, ix
	add	hl, bc
	ld	(hl), iy
	ld	(iy + 30), 1
	ld	hl, (ix + 30)
	push	hl
	call	_optix_GetStringLength
	push	hl
	pop	de
	pop	hl
	or	a, a
	sbc	hl, hl
BB26_3:
	ld	iy, (ix - 118)
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB26_9
	ld	(ix - 121), de
	ld.sis	hl, 32
	ld	(ix - 106), l
	ld	(ix - 105), h
	ld	e, 0
	ld	a, e
BB26_5:
	ld	(ix - 118), a
	ld	de, 0
	push	de
	pop	bc
	ld	c, iyl
	ld	b, iyh
	ld	hl, (ix + 30)
	add	hl, bc
	ld	a, (hl)
	cp	a, 96
	jq	z, BB26_6
	push	de
	pop	bc
	ld	c, (ix - 118)
	ld	hl, (ix - 112)
	add	hl, bc
	ld	(hl), a
	ld	a, (ix - 118)
	inc	a
	inc.sis	iy
	ld	e, iyl
	ld	d, iyh
	ld	hl, (ix - 121)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB26_5
	jq	BB26_8
BB26_6:
	ld	a, (ix - 118)
BB26_8:
	inc.sis	iy
	ld	(ix - 118), iy
	ld	de, 0
	ld	e, a
	ld	bc, -136
	lea	hl, ix
	add	hl, bc
	ld	(hl), de
	ld	hl, (ix - 112)
	add	hl, de
	ld	(hl), 0
	ld	hl, (ix - 109)
	inc	hl
	ld	de, -133
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	ld	bc, 3
	call	__imulu
	push	hl
	ld	hl, (ix - 115)
	push	hl
	call	_realloc
	ld	(ix - 115), hl
	pop	de
	pop	de
	ld	bc, -130
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy + 9), hl
	ld	bc, -136
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	inc	hl
	push	hl
	call	_malloc
	push	hl
	pop	de
	pop	hl
	ld	hl, (ix - 109)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 115)
	add	hl, bc
	ld	(hl), de
	ld	hl, (ix - 112)
	push	hl
	push	de
	call	_strcpy
	pop	hl
	pop	hl
	ld	bc, -133
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	(ix - 109), hl
	or	a, a
	sbc	hl, hl
	ld	de, (ix - 121)
	jq	BB26_3
BB26_9:
	ld	bc, 31
	ld	hl, (ix - 127)
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 124)
	add	iy, de
	ld	hl, (ix - 109)
	ld	(iy + 14), hl
BB26_10:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_DeleteLastMenu
_optix_DeleteLastMenu:
	ld	hl, -4
	call	__frameset
	xor	a, a
	ld	(ix - 1), a
	ld	a, (_optix_guidata+1)
	ld	e, a
	or	a, a
	jq	z, BB27_5
	ld	iy, (_optix_menu)
	dec	e
	ld	a, e
	ld	(_optix_guidata+1), a
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	bc, 31
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	(ix - 4), iy
BB27_2:
	ld	de, 0
	ld	e, (ix - 1)
	ld	iy, (ix - 4)
	ld	bc, (iy + 14)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB27_4
	ld	iy, (ix - 4)
	ld	iy, (iy + 9)
	ex	de, hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	push	hl
	call	_free
	pop	hl
	ld	a, (ix - 1)
	inc	a
	ld	(ix - 1), a
	jq	BB27_2
BB27_4:
	ld	iy, (ix - 4)
	ld	hl, (iy + 9)
	push	hl
	call	_free
	pop	hl
	ld	de, (_optix_menu)
	ld	a, (_optix_guidata+1)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 31
	call	__imulu
	push	hl
	push	de
	call	_realloc
	pop	de
	pop	de
	ld	(_optix_menu), hl
BB27_5:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateCurrMenu
_optix_UpdateCurrMenu:
	ld	hl, -17
	call	__frameset
	ld	hl, (_optix_menu)
	ld	(ix - 3), hl
	ld	a, (_optix_guidata)
	ld	(ix - 6), a
	call	_kb_Scan
	call	_kb_AnyKey
	or	a, a
	jq	nz, BB28_1
	ld	e, 1
	ld	a, e
	ld	(_optix_guidata+2), a
	jq	BB28_3
BB28_1:
	ld	a, (_optix_guidata+2)
	ld	e, a
BB28_3:
	ld	hl, -1
	ld	(ix - 9), hl
	inc	hl
	push	hl
	pop	bc
	ld	c, (ix - 6)
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	ld	iy, (ix - 3)
	ld	(ix - 6), bc
	jq	z, BB28_7
	ld	a, e
	or	a, a
	jq	z, BB28_7
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	bc
	ld	iy, (ix - 3)
	add	iy, bc
	ld	a, (iy + 6)
	ld	iy, (ix - 3)
	cp	a, 2
	jq	c, BB28_7
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 3)
	add	iy, de
	ld	de, 0
	push	de
	pop	hl
	ld	l, (iy + 12)
	ld	e, (iy + 5)
	ld	iy, (ix - 3)
	or	a, a
	sbc	hl, de
	ld	(ix - 9), hl
	xor	a, a
	ld	(_optix_guidata+2), a
	ld	e, a
BB28_7:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	d, 1
	ld	a, l
	xor	a, d
	bit	0, a
	jq	nz, BB28_11
	ld	a, e
	or	a, a
	jq	z, BB28_11
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	bc
	ld	iy, (ix - 3)
	add	iy, bc
	ld	a, (iy + 6)
	ld	iy, (ix - 3)
	cp	a, 2
	jq	c, BB28_11
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	bc
	lea	hl, iy
	add	hl, bc
	ld	(ix - 9), hl
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	iy, (ix - 9)
	ld	c, (iy + 12)
	ld	iy, (ix - 9)
	ld	l, (iy + 5)
	ld	iy, (ix - 3)
	add	hl, bc
	ld	(ix - 9), hl
	xor	a, a
	ld	(_optix_guidata+2), a
	ld	e, a
BB28_11:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	1, a
	jq	z, BB28_14
	ld	a, e
	or	a, a
	jq	z, BB28_14
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	bc
	ld	iy, (ix - 3)
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy + 12)
	ld	iy, (ix - 3)
	dec	hl
	ld	(ix - 9), hl
	xor	a, a
	ld	(_optix_guidata+2), a
	ld	e, a
BB28_14:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	2, a
	jq	z, BB28_17
	ld	a, e
	or	a, a
	jq	z, BB28_17
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	bc
	ld	iy, (ix - 3)
	add	iy, bc
	or	a, a
	sbc	hl, hl
	ld	l, (iy + 12)
	ld	iy, (ix - 3)
	inc	hl
	ld	(ix - 9), hl
	xor	a, a
	ld	(_optix_guidata+2), a
BB28_17:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, d
	xor	a, d
	bit	0, a
	jq	nz, BB28_19
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	z, BB28_20
BB28_19:
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix - 3)
	add	iy, de
	ld	(iy + 17), 1
	ld	iy, (ix - 3)
BB28_20:
	ld	bc, 0
	ld	de, (ix - 9)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	ld	hl, (ix - 6)
	jq	m, BB28_23
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	bc
	ld	iy, (ix - 3)
	add	iy, bc
	ld	bc, (iy + 14)
	ld	iy, (ix - 3)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	ld	hl, (ix - 6)
	call	__setflag
	jq	p, BB28_23
	ld	a, e
	ld	bc, 31
	ld	hl, (ix - 6)
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 6)
	ld	iy, (ix - 3)
	add	iy, bc
	ld	(iy + 12), a
	ld	iy, (ix - 3)
BB28_23:
	ld	bc, 31
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	a, (iy + 12)
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	(ix - 16), a
	ld	e, a
	ld	(ix - 12), de
	ld	a, (iy + 18)
	lea	de, iy
	push	hl
	pop	bc
	ld	(ix - 6), a
	ld	c, a
	ld	(ix - 15), bc
	ld	a, (iy + 5)
	push	hl
	pop	bc
	ld	(ix - 9), a
	ld	c, a
	ld	(ix - 3), iy
	ld	a, (iy + 6)
	ld	(ix - 17), a
	ld	l, a
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix - 15)
	dec	hl
	add	hl, bc
	ld	de, (ix - 12)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB28_28
	ld	l, (ix - 6)
	ld	e, (ix - 9)
	ld	a, e
	cp	a, 1
	jq	z, BB28_26
	ld	a, (ix - 17)
	cp	a, 1
	jq	nz, BB28_27
BB28_26:
	inc	l
	jq	BB28_34
BB28_28:
	ld	e, (ix - 9)
	ld	a, (ix - 16)
	ld	l, (ix - 6)
	cp	a, l
	jq	nc, BB28_35
	ld	a, e
	cp	a, 1
	jq	z, BB28_31
	ld	a, (ix - 17)
	cp	a, 1
	jq	nz, BB28_32
BB28_31:
	dec	l
	jq	BB28_34
BB28_27:
	ld	a, e
	add	a, l
	jq	BB28_33
BB28_32:
	ld	a, l
	sub	a, e
BB28_33:
	ld	l, a
BB28_34:
	ld	iy, (ix - 3)
	ld	(iy + 18), l
BB28_35:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderMenu
_optix_RenderMenu:
	ld	hl, -42
	call	__frameset
	ld	a, (ix + 6)
	ld	iy, (_optix_menu)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 31
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, (iy + 18)
	ld	(ix - 6), hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 27), de
	ld	(ix - 21), de
	ld	(ix - 24), de
BB29_1:
	push	bc
	pop	de
	ld	e, (iy + 6)
	push	hl
	pop	bc
	or	a, a
	sbc	hl, de
	jq	nc, BB29_25
	ld	(ix - 18), bc
	ld	(ix - 3), iy
	ld	de, (ix - 6)
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	ld	bc, 0
	push	bc
	pop	iy
	ld	(ix - 12), hl
BB29_3:
	ex	de, hl
	add	hl, bc
	ld	(ix - 15), hl
	lea	de, iy
	ld	iy, (ix - 3)
	ld	e, (iy + 5)
	ld	(ix - 9), bc
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	jq	nc, BB29_24
	ld	iy, (ix - 3)
	ld	de, (iy + 14)
	ld	hl, (ix - 15)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB29_24
	ld	iy, (ix - 3)
	ld	a, (iy + 30)
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	bc, (ix - 21)
	jq	nz, BB29_7
	or	a, a
	sbc	hl, hl
	ld	l, (iy + 7)
	ld	(ix - 21), hl
	ld	hl, (iy + 9)
	ld	de, (ix - 12)
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_gfx_GetStringWidth
	ld	iy, (ix - 3)
	push	hl
	pop	de
	pop	hl
	ld	hl, (ix - 21)
	or	a, a
	sbc	hl, de
	ld	c, 1
	call	__ishru
	ld	(ix - 27), hl
	ld	h, 0
	ld	l, (iy + 8)
	ld.sis	de, -8
	add.sis	hl, de
	ld.sis	bc, 2
	call	__sdivs
	ld	c, l
	ld	b, h
BB29_7:
	ld	iy, (iy + 27)
	ld	de, (ix - 12)
	lea	hl, iy
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix - 21), bc
	jq	nz, BB29_9
	ld	iy, (ix - 3)
	ld	bc, (ix - 24)
	jq	BB29_11
BB29_9:
	ld	(ix - 30), hl
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, (ix - 3)
	ld	bc, (ix - 24)
	ld	hl, (ix - 15)
	jq	z, BB29_12
	ld	d, 0
	ld	e, (iy + 7)
	ld	hl, (ix - 30)
	ld	c, (hl)
	ld	b, d
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	ld.sis	iy, 2
	ld	c, iyl
	ld	b, iyh
	call	__sdivs
	ld	(ix - 36), hl
	ld	iy, (ix - 3)
	ld	e, (iy + 8)
	ld	iy, (ix - 30)
	ld	c, (iy + 1)
	ld	b, d
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	ld.sis	bc, 2
	ld	iy, (ix - 3)
	call	__sdivs
	ld	c, l
	ld	b, h
BB29_11:
	ld	hl, (ix - 15)
BB29_12:
	ld	de, 0
	ld	e, (iy + 12)
	ld	a, (_optix_guidata)
	or	a, a
	sbc	hl, de
	ld	(ix - 24), bc
	jq	nz, BB29_17
	ld	l, (ix + 6)
	cp	a, l
	jq	nz, BB29_17
	ld	a, (iy + 17)
	ld	l, 1
	xor	a, l
	ld	e, a
	ld	a, (_optix_guicolors+2)
	ld	l, a
	ld	a, (_optix_guicolors+3)
	ld	(ix - 15), e
	bit	0, e
	jq	nz, BB29_16
	ld	l, a
BB29_16:
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	l, (ix - 15)
	push	hl
	call	_optix_CusText
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pop	de
	ld	iy, (ix - 3)
	ld	l, (iy + 7)
	push	hl
	pop	bc
	ld	(ix - 30), bc
	ld	hl, (ix - 9)
	call	__imulu
	ld	bc, (iy)
	ld	(ix - 15), bc
	ld	bc, (ix - 15)
	ld	e, c
	ld	d, b
	add	hl, de
	ld	bc, 0
	push	bc
	pop	de
	ld	e, (iy + 3)
	ld	(ix - 39), de
	add	hl, de
	ld	(ix - 15), hl
	push	bc
	pop	de
	ld	c, (iy + 8)
	ld	(ix - 33), bc
	ld	hl, (ix - 18)
	call	__imulu
	push	de
	pop	bc
	ld	e, (iy + 2)
	add	hl, de
	push	bc
	pop	de
	ld	e, (iy + 4)
	push	hl
	pop	iy
	add	iy, de
	ld	hl, (ix - 39)
	ld	bc, -2
	call	__imulu
	ld	bc, (ix - 30)
	add	hl, bc
	ld	(ix - 30), hl
	ex	de, hl
	ld	bc, -2
	call	__imulu
	ld	de, (ix - 33)
	add	hl, de
	push	hl
	ld	hl, (ix - 30)
	push	hl
	push	iy
	ld	hl, (ix - 15)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_guicolors+8)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	iy, (ix - 3)
	ld	c, (iy + 7)
	ld	(ix - 30), bc
	ld	hl, (ix - 9)
	call	__imulu
	ld	iy, (ix - 3)
	ld	de, (iy)
	ld	(ix - 15), de
	ld	bc, 0
	push	bc
	pop	de
	ld	bc, (ix - 15)
	ld	e, c
	ld	d, b
	add	hl, de
	ld	bc, 0
	push	bc
	pop	de
	ld	e, (iy + 3)
	ld	(ix - 39), de
	add	hl, de
	ld	(ix - 15), hl
	push	bc
	pop	de
	ld	e, (iy + 8)
	ld	(ix - 33), de
	ld	hl, (ix - 18)
	push	de
	pop	bc
	call	__imulu
	ld	bc, 0
	push	bc
	pop	de
	ld	e, (iy + 2)
	add	hl, de
	push	bc
	pop	de
	ld	e, (iy + 4)
	add	hl, de
	ld	(ix - 42), hl
	ld	hl, (ix - 39)
	ld	bc, -2
	call	__imulu
	push	hl
	pop	iy
	ld	bc, (ix - 30)
	add	iy, bc
	ex	de, hl
	ld	bc, -2
	call	__imulu
	ld	de, (ix - 33)
	add	hl, de
	push	hl
	push	iy
	ld	hl, (ix - 42)
	push	hl
	ld	hl, (ix - 15)
	push	hl
	call	_gfx_Rectangle
	ld	iy, (ix - 3)
	pop	hl
	pop	hl
	pop	hl
	jq	BB29_18
BB29_17:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_optix_CusText
	ld	iy, (ix - 3)
BB29_18:
	pop	hl
	ld	a, (iy + 30)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB29_20
	ld	hl, (iy + 9)
	ld	de, (ix - 12)
	add	hl, de
	ld	hl, (hl)
	ld	(ix - 30), hl
	ld	hl, (iy)
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	bc, 0
	ld	c, (iy + 7)
	ld	hl, (ix - 9)
	call	__imulu
	add	hl, de
	ld	(ix - 15), hl
	ld	de, 0
	push	de
	pop	bc
	ld	hl, (ix - 27)
	ld	c, l
	ld	b, h
	ex	de, hl
	ld	l, (iy + 19)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 15)
	add	hl, de
	ld	de, 0
	push	de
	pop	bc
	ld	e, (iy + 23)
	add	hl, de
	ld	(ix - 15), hl
	push	bc
	pop	de
	ld	e, (iy + 2)
	ld	c, (iy + 8)
	ld	hl, (ix - 18)
	call	__imulu
	add	hl, de
	ld	(ix - 33), hl
	ld	de, 0
	push	de
	pop	bc
	ld	hl, (ix - 21)
	ld	c, l
	ex	de, hl
	ld	iy, (ix - 3)
	ld	l, (iy + 20)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 33)
	add	hl, de
	ld	de, 0
	ld	iy, (ix - 3)
	ld	e, (iy + 24)
	add	hl, de
	push	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 30)
	push	hl
	call	_gfx_PrintStringXY
	ld	iy, (ix - 3)
	pop	hl
	pop	hl
	pop	hl
BB29_20:
	ld	iy, (iy + 27)
	ld	de, (ix - 12)
	lea	hl, iy
	add	hl, de
	ld	de, (hl)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, 0
	jq	z, BB29_23
	lea	hl, iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB29_23
	ld	iy, (ix - 3)
	ld	hl, (iy)
	ld	(ix - 30), de
	push	bc
	pop	de
	ld	e, l
	ld	d, h
	ld	bc, 0
	ld	c, (iy + 7)
	ld	hl, (ix - 9)
	call	__imulu
	add	hl, de
	ld	(ix - 15), hl
	ld	bc, 0
	ld	bc, (ix - 36)
	or	a, a
	sbc	hl, hl
	ld	l, (iy + 21)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 15)
	add	hl, de
	ld	de, 0
	ld	e, (iy + 25)
	add	hl, de
	ld	(ix - 15), hl
	ld	de, 0
	ld	e, (iy + 2)
	ld	bc, 0
	ld	c, (iy + 8)
	ld	hl, (ix - 18)
	call	__imulu
	add	hl, de
	ld	(ix - 33), hl
	ld	bc, 0
	ld	hl, (ix - 24)
	ld	c, l
	or	a, a
	sbc	hl, hl
	ld	iy, (ix - 3)
	ld	l, (iy + 22)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 33)
	add	hl, de
	ld	de, 0
	ld	iy, (ix - 3)
	ld	e, (iy + 26)
	add	hl, de
	push	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 30)
	push	hl
	call	_gfx_Sprite
	ld	bc, 0
	pop	hl
	pop	hl
	pop	hl
BB29_23:
	push	bc
	pop	iy
	ld	bc, (ix - 9)
	inc	bc
	ld	de, 3
	ld	hl, (ix - 12)
	add	hl, de
	ld	(ix - 12), hl
	ld	a, (ix + 6)
	ld	de, (ix - 6)
	jq	BB29_3
BB29_24:
	ld	de, (ix - 18)
	inc	de
	ld	hl, (ix - 6)
	ld	bc, (ix - 9)
	add	hl, bc
	ld	(ix - 6), hl
	ex	de, hl
	ld	bc, 0
	ld	iy, (ix - 3)
	jq	BB29_1
BB29_25:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_SetAdvancedMenuCentering
_optix_SetAdvancedMenuCentering:
	call	__frameset0
	ld	e, (ix + 9)
	ld	d, (ix + 12)
	ld	a, (ix + 18)
	ld	iy, (_optix_menu)
	or	a, a
	sbc	hl, hl
	ld	l, (ix + 6)
	ld	bc, 31
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(iy + 19), e
	ld	(iy + 20), d
	ld	l, (ix + 15)
	ld	(iy + 21), l
	ld	(iy + 22), a
	ld	a, (ix + 21)
	ld	(iy + 23), a
	ld	a, (ix + 24)
	ld	(iy + 24), a
	ld	a, (ix + 27)
	ld	(iy + 25), a
	ld	a, (ix + 30)
	ld	(iy + 26), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_GetWindowXCentering
_optix_GetWindowXCentering:
	ld	hl, -3
	call	__frameset
	ld	a, (ix + 6)
	ld	hl, (ix + 9)
	ld	iy, 0
	lea	de, iy
	ld	e, l
	ld	d, h
	ld	(ix - 3), de
	lea	bc, iy
	ld	hl, (ix + 12)
	ld	c, l
	ld	b, h
	lea	de, iy
	ld	hl, (ix + 15)
	ld	e, l
	ld	d, h
	ex	de, hl
	call	__imulu
	push	hl
	pop	bc
	ld	de, (ix - 3)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	ld	bc, 2
	call	__idivs
	ld	iyl, a
	lea	bc, iy
	call	__imulu
	push	hl
	pop	iy
	ld	c, 1
	ex	de, hl
	call	__ishru
	push	hl
	pop	bc
	ld	hl, 160
	or	a, a
	sbc	hl, bc
	lea	de, iy
	add	hl, de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_GetWindowYCentering
_optix_GetWindowYCentering:
	ld	hl, -3
	call	__frameset
	ld	a, (ix + 6)
	ld	hl, (ix + 9)
	ld	iy, 0
	lea	de, iy
	ld	e, l
	ld	d, h
	ld	(ix - 3), de
	lea	bc, iy
	ld	hl, (ix + 12)
	ld	c, l
	ld	b, h
	lea	de, iy
	ld	hl, (ix + 15)
	ld	e, l
	ld	d, h
	ex	de, hl
	call	__imulu
	push	hl
	pop	bc
	ld	de, (ix - 3)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	ld	bc, 2
	call	__idivs
	ld	iyl, a
	lea	bc, iy
	call	__imulu
	push	hl
	pop	iy
	ld	c, 1
	ex	de, hl
	call	__ishru
	push	hl
	pop	bc
	ld	hl, 120
	or	a, a
	sbc	hl, bc
	lea	de, iy
	add	hl, de
	ld.sis	de, 6
	add.sis	hl, de
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_InsertSpecialCharacter
_optix_InsertSpecialCharacter:
	ld	hl, -27
	call	__frameset
	or	a, a
	sbc	hl, hl
	push	hl
	call	_optix_CusText
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_Blit
	ld	e, 1
	ld.sis	bc, 1
	ld	iy, -720868
	pop	hl
	xor	a, a
	ld	l, a
	ld	(ix - 6), hl
	ld	(ix - 3), a
	ld	(ix - 10), a
BB33_1:
	ld	l, (iy)
	ld	h, (iy + 1)
	call	__sand
	ld	a, l
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB33_38
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	nz, BB33_38
	ld	a, (_optix_guicolors)
	ld	l, a
	push	hl
	call	_gfx_FillScreen
	pop	hl
	call	_kb_Scan
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	d, (ix - 16)
	ld	a, d
	and	a, 1
	ld	e, 1
	xor	a, e
	bit	3, l
	ld	l, e
	jq	z, BB33_5
	ld	l, a
BB33_5:
	ld	a, (ix - 10)
	or	a, a
	ld	a, 1
	jq	z, BB33_7
	ld	a, 0
BB33_7:
	bit	0, l
	ld	l, e
	jq	nz, BB33_9
	ld	l, a
BB33_9:
	ld	a, l
	xor	a, e
	ld	b, 7
	call	__bshl
	rlc	a
	sbc	a, a
	ld	e, a
	ld	a, (ix - 10)
	add	a, e
	ld	e, a
	bit	0, l
	ld	iyl, 0
	jq	nz, BB33_11
	ld	d, 0
BB33_11:
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, d
	and	a, 1
	ld	c, a
	bit	0, l
	jq	nz, BB33_13
	ld	c, iyl
BB33_13:
	ld	a, e
	cp	a, 7
	ld	l, 1
	jq	c, BB33_15
	ld	l, 0
BB33_15:
	bit	0, c
	ld	h, 1
	jq	nz, BB33_17
	ex	de, hl
	ld	e, iyl
	ex	de, hl
BB33_17:
	ld	a, l
	and	a, 1
	ld	c, a
	ld	a, e
	add	a, c
	ld	(ix - 10), a
	bit	0, l
	ld	l, 0
	jq	nz, BB33_19
	ld	l, d
BB33_19:
	ld	iy, -720866
	ld	e, (iy)
	ld	d, (iy + 1)
	ld	a, l
	and	a, 1
	ld	d, 1
	xor	a, d
	bit	1, e
	ld	e, h
	jq	z, BB33_21
	ld	e, a
BB33_21:
	ld	a, (ix - 3)
	or	a, a
	ld	a, 1
	ld	iy, -720868
	jq	z, BB33_23
	ld	a, 0
BB33_23:
	bit	0, e
	ld	c, h
	jq	nz, BB33_25
	ld	c, a
BB33_25:
	ld	a, c
	xor	a, h
	ld	b, 7
	call	__bshl
	rlc	a
	sbc	a, a
	ld	e, a
	ld	a, (ix - 3)
	add	a, e
	ld	e, a
	bit	0, c
	jq	nz, BB33_27
	ld	l, 0
BB33_27:
	ld	a, l
	ld	hl, -720866
	ld	c, (hl)
	inc	hl
	ld	b, (hl)
	ld	l, a
	and	a, 1
	ld	h, a
	bit	2, c
	jq	nz, BB33_29
	ld	h, 0
BB33_29:
	ld	a, e
	cp	a, 15
	ld	c, 1
	jq	c, BB33_31
	ld	c, 0
BB33_31:
	bit	0, h
	jq	nz, BB33_33
	ld	c, 0
BB33_33:
	ld	a, c
	and	a, 1
	ld	h, a
	ld	a, e
	add	a, h
	ld	(ix - 3), a
	bit	0, c
	ld	e, 0
	jq	nz, BB33_35
	ld	e, l
BB33_35:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, e
	and	a, 1
	bit	6, l
	jq	z, BB33_41
	xor	a, d
	xor	a, d
	bit	0, a
	jq	nz, BB33_37
BB33_41:
	ld	(ix - 27), e
	call	_kb_AnyKey
	ld	(ix - 16), a
	ld	a, (_optix_guicolors+1)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 86
	push	hl
	ld	hl, 166
	push	hl
	ld	hl, 83
	push	hl
	ld	hl, 77
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_guicolors+2)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 86
	push	hl
	ld	hl, 166
	push	hl
	ld	hl, 83
	push	hl
	ld	hl, 77
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	ld	l, (ix - 3)
	ld	bc, 10
	call	__imulu
	ld	(ix - 9), hl
	push	hl
	pop	iy
	ld	de, 79
	add	iy, de
	or	a, a
	sbc	hl, hl
	ld	l, (ix - 10)
	call	__imulu
	ld	(ix - 13), hl
	ld	de, 85
	add	hl, de
	ld	de, 12
	push	de
	push	de
	push	hl
	push	iy
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, 166
	push	hl
	ld	hl, 71
	push	hl
	ld	hl, 77
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_optix_CusText
	ld	e, 1
	pop	hl
	xor	a, a
	ld	iy, 0
BB33_42:
	lea	hl, iy
	ld	bc, 8
	or	a, a
	sbc	hl, bc
	jq	z, BB33_47
	lea	hl, iy
	ld	bc, 10
	call	__imulu
	ld	de, 87
	add	hl, de
	ld	(ix - 23), hl
	ld	l, a
	ld	(ix - 6), hl
	ld	hl, 81
BB33_44:
	push	hl
	pop	bc
	ld	de, 241
	or	a, a
	sbc	hl, de
	jq	z, BB33_46
	ld	hl, (ix - 23)
	push	hl
	ld	(ix - 26), bc
	push	bc
	ld	(ix - 19), iy
	ld	(ix - 20), a
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 6)
	push	hl
	call	_gfx_PrintChar
	ld	a, (ix - 20)
	ld	iy, (ix - 19)
	pop	hl
	ld	hl, (ix - 26)
	ld	de, 10
	add	hl, de
	ld	de, (ix - 6)
	inc	e
	ld	(ix - 6), de
	jq	BB33_44
BB33_46:
	inc	iy
	add	a, 16
	ld	e, 1
	jq	BB33_42
BB33_47:
	ld	a, (ix - 16)
	or	a, a
	ld	a, e
	jq	z, BB33_49
	ld	a, (ix - 27)
BB33_49:
	ld	(ix - 16), a
	ld	a, (_optix_guicolors+2)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	iy, (ix - 9)
	ld	de, 80
	add	iy, de
	ld	hl, (ix - 13)
	ld	de, 86
	add	hl, de
	ld	de, 10
	push	de
	push	de
	push	hl
	push	iy
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	call	_optix_CusText
	pop	hl
	ld	hl, L_.str.4
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	a, 1
	ld	c, a
	call	__ishru
	push	hl
	pop	de
	ld	hl, 160
	or	a, a
	sbc	hl, de
	ld	de, 74
	push	de
	push	hl
	ld	hl, L_.str.4
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	de, 81
	ld	iy, (ix - 9)
	add	iy, de
	ld	de, 87
	ld	hl, (ix - 13)
	add	hl, de
	push	hl
	push	iy
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	a, (ix - 10)
	ld	b, 4
	call	__bshl
	ld	l, a
	ld	a, (ix - 3)
	add	a, l
	ld	l, a
	ld	(ix - 6), hl
	push	hl
	call	_gfx_PrintChar
	pop	hl
	call	_gfx_SwapDraw
	ld	iy, -720868
	ld.sis	bc, 1
	ld	e, 1
	jq	BB33_1
BB33_37:
	xor	a, a
	ld	l, a
	ld	(ix - 6), hl
BB33_38:
	ld	iy, 0
	push	af
	ld	a, (ix - 3)
	ld	iyl, a
	pop	af
	lea	hl, iy
	ld	bc, 10
	call	__imulu
	ld	(ix - 9), hl
	ld	de, 80
	add	hl, de
	ld	(ix - 13), hl
	ld	a, (ix - 10)
	ld	iyl, a
	lea	hl, iy
	call	__imulu
	push	hl
	pop	iy
	ld	de, 86
	add	iy, de
	ld	(ix - 19), iy
	ld	de, 81
	ld	iy, (ix - 9)
	add	iy, de
	ld	(ix - 9), iy
	ld	de, 87
	add	hl, de
	ld	(ix - 16), hl
	ld	b, 4
	call	__bshl
	ld	l, (ix - 3)
	add	a, l
	ld	l, a
	ld	(ix - 3), hl
	ld.sis	bc, 1
	ld	iy, -720868
	ld	de, (ix - 6)
BB33_39:
	ld	l, (iy)
	ld	h, (iy + 1)
	call	__sand
	ld	a, l
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB33_50
	call	_kb_Scan
	ld	a, (_optix_guicolors+3)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 10
	push	hl
	push	hl
	ld	hl, (ix - 19)
	push	hl
	ld	hl, (ix - 13)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	call	_optix_CusText
	pop	hl
	ld	hl, (ix - 16)
	push	hl
	ld	hl, (ix - 9)
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, (ix - 3)
	push	hl
	call	_gfx_PrintChar
	pop	hl
	call	_gfx_SwapDraw
	ld.sis	bc, 1
	ld	iy, -720868
	ld	de, (ix - 3)
	jq	BB33_39
BB33_50:
	ld	a, e
	cp	a, 96
	jq	z, BB33_52
	ld	a, e
	cp	a, 126
	jq	nz, BB33_53
BB33_52:
	ld	hl, 10
	ex	de, hl
	push	de
	ld	hl, 150
	push	hl
	push	de
	ld	hl, L_.str.6
	push	hl
	ld	hl, L_.str.5
	push	hl
	call	_optix_Message
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	xor	a, a
	ld	e, a
BB33_53:
	ld	(ix - 6), de
	ld	hl, 1
	push	hl
	call	_gfx_Blit
	pop	hl
	ld	hl, (ix - 6)
	ld	a, l
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_GetStringInput
_optix_GetStringInput:
	ld	hl, -81
	call	__frameset
	ld.sis	de, 0
	lea	hl, ix - 22
	ld	(ix - 2), e
	ld	(ix - 1), d
	ld	(ix - 22), 0
	push	hl
	pop	de
	inc	de
	ld	bc, 19
	ld	(ix - 35), hl
	ldir
	ld	hl, (_optix_stringinput)
	ld	de, (ix + 15)
	inc	de
	push	de
	push	hl
	call	_realloc
	pop	de
	pop	de
	ld	(_optix_stringinput), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB34_2
	ld	hl, 0
	jq	BB34_39
BB34_2:
	ld	de, (ix + 12)
	ld	iy, L_.str
	ld	c, 1
	ld	(ix - 47), bc
	lea	bc, ix - 2
	ld	(ix - 53), bc
	ld	bc, (ix + 15)
	add	hl, bc
	ld	(hl), 0
	push	de
	push	iy
	call	_optix_WordWrap
	pop	hl
	pop	hl
	ld	de, 0
	push	de
	pop	hl
	ld	bc, (ix + 12)
	ld	l, c
	ld	h, b
	ld	(ix - 38), hl
	ld	bc, 6
	add	hl, bc
	ld	c, 1
	ld	(ix - 41), hl
	call	__ishru
	ld	(ix - 28), hl
	ex	de, hl
	ld	l, (ix + 9)
	ld	(ix - 60), hl
	ld	de, 18
	add	hl, de
	call	__ishru
	ld	(ix - 25), hl
BB34_3:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB34_4
	call	_kb_Scan
	jq	BB34_3
BB34_4:
	ld	hl, 160
	ld	de, (ix - 28)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, 120
	ld	bc, (ix - 25)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ex	de, hl
	ld	bc, 255
	call	__iand
	ld	(ix - 28), hl
	lea	hl, iy
	call	__iand
	push	hl
	pop	bc
	push	bc
	pop	iy
	ld	de, 12
	add	iy, de
	ld	(ix - 56), iy
	ld	iy, (ix - 28)
	ld	(ix - 31), iy
	ld	de, 4
	add	iy, de
	ld	(ix - 75), iy
	ld	de, 14
	add	hl, de
	ld	(ix - 78), hl
	ld	iy, (ix - 31)
	lea	hl, iy
	ld	de, 5
	add	hl, de
	ld	(ix - 81), hl
	ld	(ix - 63), bc
	push	bc
	pop	hl
	ld	bc, 3
	add	hl, bc
	ld	(ix - 44), hl
	inc	de
	add	iy, de
	ld	(ix - 31), iy
	ld	hl, (ix - 38)
	add	hl, bc
	ld	de, (ix - 28)
	add	hl, de
	ld	(ix - 38), hl
	ld	a, -120
	ld	hl, (ix - 25)
	sub	a, l
	ld	l, a
	ld	(ix - 66), hl
	ld	l, (ix + 9)
	ld	(ix - 69), hl
	or	a, a
	sbc	hl, hl
	ld	(ix - 25), hl
	xor	a, a
	ld	(ix - 32), a
	ld	(ix - 57), a
BB34_5:
	call	_os_GetCSC
	ld	e, a
	cp	a, 9
	jq	z, BB34_36
	or	a, a
	sbc	hl, hl
	push	hl
	pop	iy
	ld	iyl, e
	ld	l, (ix - 32)
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, L___const.optix_GetStringInput.keys
	add	hl, bc
	ld	hl, (hl)
	lea	bc, iy
	add	hl, bc
	ld	d, (hl)
	ld	a, d
	or	a, a
	ld	(ix - 50), e
	jq	z, BB34_7
	ld	hl, (ix - 25)
	ld	bc, (ix + 15)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB34_7
	ld	hl, (_optix_stringinput)
	ld	bc, (ix - 25)
	add	hl, bc
	inc	bc
	ld	(ix - 25), bc
	ld	(hl), d
	ld	hl, (_optix_stringinput)
	ld	de, (ix + 12)
	push	de
	push	hl
	call	_optix_WordWrap
	ld	l, a
	ld	(ix - 47), hl
	pop	hl
	pop	hl
	xor	a, a
	ld	iyh, a
	jq	BB34_10
BB34_7:
	push	af
	ld	a, (ix - 57)
	ld	iyh, a
	pop	af
BB34_10:
	ld	bc, (ix - 25)
	ld	a, (ix - 50)
	cp	a, 56
	push	af
	ld	a, iyh
	ld	(ix - 57), a
	pop	af
	jq	nz, BB34_13
	push	bc
	pop	hl
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB34_13
	ld	hl, (_optix_stringinput)
	dec	bc
	ld	(ix - 25), bc
	add	hl, bc
	ld	(hl), 0
	jq	BB34_19
BB34_13:
	ld	a, (ix - 50)
	cp	a, 15
	jq	nz, BB34_15
	ld	hl, (_optix_stringinput)
	ld.sis	de, 32
	ld	(hl), e
	inc	hl
	ld	(hl), d
	ld	hl, (_optix_wordwraptext)
	ld	(hl), e
	inc	hl
	ld	(hl), d
	or	a, a
	sbc	hl, hl
	ld	(ix - 25), hl
	jq	BB34_19
BB34_15:
	cp	a, 10
	ld	de, (ix + 15)
	ld	(ix - 25), bc
	jq	nz, BB34_16
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB34_16
	call	_optix_InsertSpecialCharacter
	ld	hl, (_optix_stringinput)
	ld	de, (ix - 25)
	add	hl, de
	inc	de
	ld	(ix - 25), de
	ld	(hl), a
BB34_19:
	ld	hl, (_optix_stringinput)
	ld	de, (ix + 12)
	push	de
	push	hl
	call	_optix_WordWrap
	ld	l, a
	ld	(ix - 47), hl
	pop	hl
	pop	hl
	ld	e, (ix - 32)
	ld	a, (ix - 50)
	jq	BB34_20
BB34_16:
	ld	a, (ix - 50)
	ld	e, (ix - 32)
BB34_20:
	cp	a, 48
	ld	a, 1
	jq	z, BB34_22
	ld	a, 0
BB34_22:
	and	a, 1
	ld	l, a
	ld	a, e
	add	a, l
	cp	a, 3
	ld	l, 0
	ld	de, (ix - 25)
	jq	nc, BB34_24
	ld	l, a
BB34_24:
	ld	(ix - 32), l
	ld	hl, (_optix_stringinput)
	inc	de
	add	hl, de
	ld	(hl), 0
	ld	a, (_optix_guicolors+1)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	de, 0
	ld	hl, (ix - 47)
	ld	e, l
	ld	(ix - 50), de
	ex	de, hl
	ld	bc, (ix - 60)
	call	__imulu
	ld	de, 6
	add	hl, de
	ld	(ix - 72), hl
	push	hl
	ld	hl, (ix - 41)
	push	hl
	ld	hl, (ix - 56)
	push	hl
	ld	hl, (ix - 28)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_guicolors+2)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (ix - 72)
	push	hl
	ld	hl, (ix - 41)
	push	hl
	ld	hl, (ix - 56)
	push	hl
	ld	hl, (ix - 28)
	push	hl
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 12
	push	hl
	ld	hl, (ix - 41)
	push	hl
	ld	hl, (ix - 63)
	push	hl
	ld	hl, (ix - 28)
	push	hl
	call	_gfx_FillRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	e, (ix - 57)
	ld	a, e
	cp	a, 10
	jq	nc, BB34_26
	ld	iy, (_optix_wordwraptext)
	ld	hl, (ix - 50)
	dec	hl
	ld	(ix - 50), hl
	ld	bc, 201
	call	__imulu
	push	hl
	pop	de
	ld	(ix - 72), de
	add	iy, de
	push	iy
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	iy, (ix - 75)
	add	iy, de
	ld	hl, (ix - 50)
	ld	bc, (ix - 60)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix - 78)
	add	hl, de
	ex	de, hl
	ld	(ix - 50), de
	ld	hl, 11
	push	hl
	push	de
	push	iy
	call	_gfx_VertLine
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_optix_wordwraptext)
	ld	de, (ix - 72)
	add	hl, de
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, (ix - 81)
	add	hl, de
	ld	de, 11
	push	de
	ld	de, (ix - 50)
	push	de
	push	hl
	call	_gfx_VertLine
	ld	e, (ix - 57)
	pop	hl
	pop	hl
	pop	hl
BB34_26:
	inc	e
	ld	a, e
	cp	a, 21
	ld	a, 0
	jq	nc, BB34_28
	ld	a, e
BB34_28:
	ld	(ix - 57), a
	ld	hl, 1
	push	hl
	call	_optix_CusText
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_GetStringWidth
	pop	de
	ld	c, 1
	call	__ishru
	push	hl
	pop	de
	ld	hl, 160
	or	a, a
	sbc	hl, de
	ld	de, (ix - 44)
	push	de
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 15)
	push	hl
	ld	hl, (ix - 25)
	push	hl
	ld	hl, L_.str.10
	push	hl
	ld	hl, (ix - 35)
	push	hl
	call	_sprintf
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	l, (ix - 32)
	ld	a, l
	or	a, a
	jq	nz, BB34_29
	ld	(ix - 2), 65
	jq	BB34_35
BB34_29:
	ld	a, l
	cp	a, 1
	jq	nz, BB34_30
	ld	(ix - 2), 97
	jq	BB34_35
BB34_30:
	ld	a, l
	cp	a, 2
	jq	nz, BB34_34
	ld	(ix - 2), 49
	jq	BB34_35
BB34_34:
	ld	(ix - 2), 63
BB34_35:
	ld	hl, (ix - 44)
	push	hl
	ld	hl, (ix - 31)
	push	hl
	ld	hl, (ix - 35)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 53)
	push	hl
	call	_gfx_GetStringWidth
	push	hl
	pop	de
	pop	hl
	ld	hl, (ix - 38)
	or	a, a
	sbc	hl, de
	ld	de, (ix - 44)
	push	de
	push	hl
	ld	hl, (ix - 53)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix - 47)
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, (ix - 69)
	push	hl
	ld	hl, (ix - 66)
	push	hl
	ld	hl, (ix - 31)
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_optix_PrintWordWrap
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	jq	BB34_5
BB34_36:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB34_38
	call	_kb_Scan
	jq	BB34_36
BB34_38:
	ld	hl, (_optix_stringinput)
BB34_39:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_InitializeButtons
_optix_InitializeButtons:
	or	a, a
	sbc	hl, hl
	push	hl
	call	_malloc
	pop	de
	ld	(_optix_button), hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_AddButton
_optix_AddButton:
	ld	hl, -4
	call	__frameset
	ld	bc, 28
	ld	de, (_optix_button)
	ld	a, (_optix_buttoninfo)
	or	a, a
	sbc	hl, hl
	ld	l, a
	call	__imulu
	add	hl, bc
	push	hl
	push	de
	call	_realloc
	pop	de
	pop	de
	ld	(_optix_button), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB36_1
	ld	hl, L_.str.11
	ld	de, L_.str.12
	ld	bc, 3
	push	bc
	ld	bc, 150
	push	bc
	ld	bc, 10
	push	bc
	push	de
	push	hl
	call	_optix_Message
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	jq	BB36_3
BB36_1:
	push	hl
	pop	iy
	ld	a, (_optix_buttoninfo)
	ld	(ix - 1), a
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 28
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	(ix - 4), iy
	ld	hl, (ix + 6)
	ld	(iy), l
	ld	(iy + 1), h
	ld	a, (ix + 9)
	ld	(iy + 2), a
	ld	hl, (ix + 12)
	ld	(iy + 3), l
	ld	(iy + 4), h
	ld	a, (ix + 15)
	ld	(iy + 5), a
	ld	hl, (ix + 18)
	push	hl
	pea	iy + 6
	call	_strcpy
	pop	hl
	pop	hl
	ld	hl, (ix + 21)
	ld	iy, (ix - 4)
	ld	(iy + 21), hl
	ld	hl, (ix + 24)
	ld	(iy + 24), hl
	ld	a, (ix + 27)
	ld	(iy + 27), a
	ld	a, (ix - 1)
	inc	a
	ld	(_optix_buttoninfo), a
BB36_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_DeleteButton
_optix_DeleteButton:
	ld	hl, -12
	call	__frameset
	ld	a, (_optix_buttoninfo)
	ld	de, (_optix_button)
	ld	iy, 0
	lea	hl, iy
	ld	l, a
	push	af
	ld	a, (ix + 6)
	ld	iyl, a
	pop	af
	ld	bc, 28
	ld	(ix - 3), hl
	call	__imulu
	push	hl
	pop	bc
	ld	(ix - 9), de
	ex	de, hl
	add	hl, bc
BB37_1:
	ld	(ix - 6), hl
	lea	hl, iy
	ld	de, (ix - 3)
	or	a, a
	sbc	hl, de
	lea	bc, iy
	jq	nc, BB37_3
	dec	de
	ld	(ix - 3), de
	ld	hl, (ix - 6)
	push	hl
	pop	iy
	lea	de, iy - 28
	ld	(ix - 12), de
	push	bc
	pop	iy
	ld	bc, 28
	ldir
	ld	hl, (ix - 12)
	jq	BB37_1
BB37_3:
	dec	a
	ld	(_optix_buttoninfo), a
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 28
	call	__imulu
	push	hl
	ld	hl, (ix - 9)
	push	hl
	call	_realloc
	pop	de
	pop	de
	ld	(_optix_button), hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_itz_menu
_itz_menu:
BB38_1:
	ld	iy, (_optix_menu)
	ld	a, (_optix_guidata)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, 31
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	a, (iy + 17)
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	nz, BB38_3
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, e
	bit	0, a
	jq	nz, BB38_4
BB38_3:
	call	_kb_Scan
	ld	a, (_optix_guicolors)
	ld	l, a
	push	hl
	call	_gfx_FillScreen
	pop	hl
	call	_optix_UpdateCurrMenu
	ld	a, (_optix_guidata)
	ld	l, a
	push	hl
	call	_optix_RenderMenu
	pop	hl
	ld	hl, 4
	push	hl
	ld	hl, 100
	push	hl
	ld	hl, 10
	push	hl
	ld	hl, L_.str.14
	push	hl
	ld	hl, L_.str.13
	push	hl
	call	_optix_Dialogue
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	call	_gfx_SwapDraw
	jq	BB38_1
BB38_4:
	jp	_optix_DeleteLastMenu
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_menu
_menu:
	call	_gfx_Begin
	call	_itz_Menu
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ret
	section	.text,"ax",@progbits

	section	.bss,"aw",@nobits
	public	_optix_guidata
_optix_guidata:
	rb	12

	section	.bss,"aw",@nobits
	public	_optix_guicolors
_optix_guicolors:
	rb	9

	section	.bss,"aw",@nobits
	public	_optix_cursor
_optix_cursor:
	rb	4

	section	.bss,"aw",@nobits
	public	_optix_guisettings
_optix_guisettings:
	rb	3

	section	.bss,"aw",@nobits
	public	_optix_buttoninfo
_optix_buttoninfo:
	rb	2

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	1 dup 0

	section	.bss,"aw",@nobits
	public	_optix_wordwraptext
_optix_wordwraptext:
	rb	3

	section	.bss,"aw",@nobits
	public	_optix_menu
_optix_menu:
	rb	3

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"Special characters", 0

	section	.rodata,"a",@progbits
	private	L_.str.5
L_.str.5:
	db	"ERROR", 0

	section	.rodata,"a",@progbits
	private	L_.str.6
L_.str.6:
	db	"You attempted to use a character reserved by OPTIX. Nice try, bucko.", 0

	section	.rodata,"a",@progbits
	private	L_.str.7
L_.str.7:
	db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "WRMH", 0, 0, "?", 0, "VQLG", 0, 0, ".ZUPKFC", 0, " YTOJEB", 0, 0, "XSNIDA", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	section	.rodata,"a",@progbits
	private	L_.str.8
L_.str.8:
	db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "wrmh", 0, 0, "?", 0, "vqlg", 0, 0, ".zupkfc", 0, " ytojeb", 0, 0, "xsnida", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	section	.rodata,"a",@progbits
	private	L_.str.9
L_.str.9:
	db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "-369)", 0, 0, 0, ".258(", 0, 0, 0, "0147,", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	section	.rodata,"a",@progbits
	private	L___const.optix_GetStringInput.keys
L___const.optix_GetStringInput.keys:
	dl	L_.str.7
	dl	L_.str.8
	dl	L_.str.9

	section	.bss,"aw",@nobits
	public	_optix_stringinput
_optix_stringinput:
	rb	3

	section	.rodata,"a",@progbits
	private	L_.str.10
L_.str.10:
	db	"%d/%d", 0

	section	.bss,"aw",@nobits
	public	_optix_button
_optix_button:
	rb	3

	section	.rodata,"a",@progbits
	private	L_.str.11
L_.str.11:
	db	"ERROR 01", 0

	section	.rodata,"a",@progbits
	private	L_.str.12
L_.str.12:
	db	"Failed to reallocate space in the dynamic array for a new button. Please submit a bug report!", 0

	section	.rodata,"a",@progbits
	private	L_.str.13
L_.str.13:
	db	"Loading", 0

	section	.rodata,"a",@progbits
	private	L_.str.14
L_.str.14:
	db	"Something is loading, which is pretty cool.", 0

	section	.bss,"aw",@nobits
	public	_optix_box
_optix_box:
	rb	6

	ident	"clang version 14.0.0 (https://github.com/jacobly0/llvm-project a139def90d26173f771eb1eca797633d1fbb2797)"
	extern	_gfx_SetTextTransparentColor
	extern	__Unwind_SjLj_Register
	extern	_gfx_PrintChar
	extern	_malloc
	extern	__idivs
	extern	__idivu
	extern	_gfx_Blit
	extern	_gfx_Circle
	extern	__ixor
	extern	_gfx_Sprite
	extern	_realloc
	extern	_free
	extern	_sprintf
	extern	__indcallhl
	extern	_itz_Menu
	extern	__ishru
	extern	__sdivs
	extern	_gfx_FillScreen
	extern	_strcpy
	extern	__imulu
	extern	_gfx_Rectangle
	extern	_gfx_End
	extern	__frameset0
	extern	_gfx_SetTextXY
	extern	_gfx_SetTextFGColor
	extern	_gfx_Begin
	extern	__sshl
	extern	__sand
	extern	__sshru
	extern	__setflag
	extern	__iand
	extern	_gfx_FillRectangle
	extern	_os_GetCSC
	extern	__frameset
	extern	_kb_AnyKey
	extern	_gfx_SetTextBGColor
	extern	_kb_Scan
	extern	_gfx_GetStringWidth
	extern	_gfx_SwapDraw
	extern	_gfx_VertLine
	extern	__Unwind_SjLj_Unregister
	extern	_gfx_SetColor
	extern	_strcat
	extern	__bshl
	extern	_gfx_PrintStringXY
	extern	_gfx_TransparentSprite
	extern	_gfx_SetTextScale
